
===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Api\Controllers\AdminUsersController.cs =====
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using OnlineStore.Application.Interfaces.Services;

namespace OnlineStore.Api.Controllers;

[ApiController]
[Route("api/admin/users")]
[Authorize(Roles = "Admin")]
public sealed class AdminUsersController : ControllerBase
{
    private readonly IUsersService _usersService;

    public AdminUsersController(IUsersService usersService)
    {
        _usersService = usersService;
    }

    [HttpPost("{id:guid}/make-admin")]
    public async Task<IActionResult> MakeAdmin([FromRoute] Guid id, CancellationToken ct)
    {
        await _usersService.MakeAdminAsync(id, ct);
        return NoContent();
    }

    [HttpPost("{id:guid}/remove-admin")]
    public async Task<IActionResult> RemoveAdmin([FromRoute] Guid id, CancellationToken ct)
    {
        await _usersService.RemoveAdminAsync(id, ct);
        return NoContent();
    }

    [HttpPost("{id:guid}/soft-delete")]
    public async Task<IActionResult> SoftDelete([FromRoute] Guid id, CancellationToken ct)
    {
        await _usersService.SoftDeleteAsync(id, ct);
        return NoContent();
    }

    [HttpPost("{id:guid}/restore")]
    public async Task<IActionResult> Restore([FromRoute] Guid id, CancellationToken ct)
    {
        await _usersService.RestoreAsync(id, ct);
        return NoContent();
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Api\Controllers\AuthController.cs =====
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.RateLimiting;
using OnlineStore.Application.DTOs.Auth;
using OnlineStore.Application.Interfaces.Services;
using OnlineStore.Api.Security;             // User.GetUserId()
using OnlineStore.Infrastructure.Security;  // CookieNames, CookieFactory

namespace OnlineStore.Api.Controllers
{
    /// <summary>
    /// Аутентификация: регистрация/логин, refresh по cookie, управление сессиями.
    /// </summary>
    [ApiController]
    [Route("api/[controller]")]
    public class AuthController : ControllerBase
    {
        private readonly IAuthService _auth;
        private readonly IHostEnvironment _env;

        public AuthController(IAuthService auth, IHostEnvironment env)
        {
            _auth = auth;
            _env = env;
        }

        // -------- helpers --------

        private (string? ip, string? ua) GetClientInfo()
        {
            var ip = HttpContext.Connection.RemoteIpAddress?.ToString();
            var ua = Request.Headers.UserAgent.ToString();
            return (ip, ua);
        }

        private bool IsProd() => _env.IsProduction();

        // -------- endpoints --------

        /// <summary>Регистрация: access в body, refresh — в HttpOnly cookie.</summary>
        [HttpPost("register")]
        [EnableRateLimiting("ip-register")]
        public async Task<ActionResult<AuthResponse>> Register([FromBody] RegisterRequest request)
        {
            var resp = await _auth.RegisterAsync(request);

            if (!string.IsNullOrWhiteSpace(resp.RefreshToken))
            {
                Response.Cookies.Append(
                    CookieNames.RefreshToken,
                    resp.RefreshToken,
                    CookieFactory.Refresh(Request)
                );
                resp.RefreshToken = null; // в тело не отдаём
            }

            return Ok(new AuthResponse { Email = resp.Email, Token = resp.Token });
        }

        /// <summary>Логин: access в body, refresh — в HttpOnly cookie.</summary>
        [HttpPost("login")]
        [EnableRateLimiting("ip-login")]
        public async Task<ActionResult<AuthResponse>> Login([FromBody] LoginRequest request)
        {
            var resp = await _auth.LoginAsync(request);

            if (!string.IsNullOrWhiteSpace(resp.RefreshToken))
            {
                Response.Cookies.Append(
                    CookieNames.RefreshToken,
                    resp.RefreshToken,
                    CookieFactory.Refresh(Request)
                );
                resp.RefreshToken = null;
            }

            return Ok(new AuthResponse { Email = resp.Email, Token = resp.Token });
        }

        /// <summary>
        /// Идемпотентный refresh без тела: читает refresh из cookie, возвращает новый access и ротацию refresh-cookie.
        /// </summary>
        [HttpPost("refresh")]
        [AllowAnonymous]
        public async Task<ActionResult<AuthResponse>> Refresh()
        {
            var raw = Request.Cookies[CookieNames.RefreshToken];
            if (string.IsNullOrWhiteSpace(raw))
                return Unauthorized();

            var (ip, ua) = GetClientInfo();
            var resp = await _auth.RefreshAsync(new RefreshRequest { RefreshToken = raw }, ip, ua);

            if (!string.IsNullOrWhiteSpace(resp.RefreshToken))
            {
                Response.Cookies.Append(
                    CookieNames.RefreshToken,
                    resp.RefreshToken,
                    CookieFactory.Refresh(Request)
                );
                resp.RefreshToken = null;
            }

            return Ok(new AuthResponse { Email = resp.Email, Token = resp.Token });
        }

        /// <summary>Выход из текущей сессии: отзывает refresh и стирает cookie.</summary>
        [HttpPost("logout")]
        [Authorize]
        public async Task<IActionResult> Logout()
        {
            var raw = Request.Cookies[CookieNames.RefreshToken];
            if (!string.IsNullOrWhiteSpace(raw))
            {
                var (ip, _) = GetClientInfo();
                await _auth.LogoutAsync(raw, ip);

                Response.Cookies.Append(
                    CookieNames.RefreshToken,
                    string.Empty,
                    CookieFactory.Expired(Request)
                );
            }
            return NoContent();
        }

        /// <summary>Закрыть все мои сессии.</summary>
        [HttpPost("logout-all")]
        [Authorize]
        public async Task<IActionResult> LogoutAll()
        {
            var (ip, _) = GetClientInfo();
            await _auth.LogoutAllAsync(User.GetUserId(), ip);

            Response.Cookies.Append(
                CookieNames.RefreshToken,
                string.Empty,
                CookieFactory.ExpiredNow(IsProd())
            );

            return NoContent();
        }

        /// <summary>Список моих сессий.</summary>
        [HttpGet("sessions")]
        [Authorize]
        public async Task<ActionResult<List<SessionDto>>> Sessions()
        {
            var list = await _auth.GetSessionsAsync(User.GetUserId());
            return Ok(list);
        }

        /// <summary>Закрыть конкретную мою сессию по Id refresh-токена.</summary>
        [HttpDelete("sessions/{id:guid}")]
        [Authorize]
        public async Task<IActionResult> CloseSession(Guid id)
        {
            var (ip, _) = GetClientInfo();
            await _auth.LogoutSessionAsync(User.GetUserId(), id, ip);
            return NoContent();
        }

        /// <summary>[Admin] Закрыть все сессии указанного пользователя.</summary>
        [HttpPost("admin/logout-all/{userId:guid}")]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> AdminLogoutAll(Guid userId)
        {
            var (ip, _) = GetClientInfo();
            await _auth.LogoutAllAsync(userId, ip);
            return NoContent();
        }
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Api\Extensions\RateLimitingExtensions.cs =====
using System.Net.Mime;
using System.Text.Json;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.RateLimiting;
using Microsoft.Extensions.DependencyInjection;
using System.Threading.RateLimiting;

namespace OnlineStore.Api.Extensions
{
    /// <summary>
    /// Расширения для настройки и включения rate limiting в веб-слое.
    /// </summary>
    public static class RateLimitingExtensions
    {
        /// <summary>
        /// Регистрирует политики лимитов для /auth/login и /auth/register (пер-IP),
        /// а также единый обработчик 429 в формате ProblemDetails.
        /// </summary>
        public static IServiceCollection AddAuthRateLimiting(this IServiceCollection services)
        {
            services.AddRateLimiter(options =>
            {
                // Единый ответ при превышении лимита: 429 application/problem+json
                options.OnRejected = async (context, ct) =>
                {
                    context.HttpContext.Response.StatusCode = StatusCodes.Status429TooManyRequests;
                    context.HttpContext.Response.ContentType = MediaTypeNames.Application.ProblemJson;

                    var retryAfter = context.Lease?.TryGetMetadata(MetadataName.RetryAfter, out var ra) == true
                        ? ra.TotalSeconds.ToString("F0")
                        : "60";
                    context.HttpContext.Response.Headers.Append("Retry-After", retryAfter);

                    var pd = new ProblemDetails
                    {
                        Type = "https://httpstatuses.com/429",
                        Title = "Слишком много запросов",
                        Status = StatusCodes.Status429TooManyRequests,
                        Detail = "Повторите попытку позже.",
                        Instance = context.HttpContext.Request.Path
                    };
                    pd.Extensions["traceId"] = context.HttpContext.TraceIdentifier;

                    await context.HttpContext.Response.WriteAsync(JsonSerializer.Serialize(pd), ct);
                };

                // Политика для /auth/login — 10 запросов/мин на IP
                options.AddPolicy("ip-login", httpContext =>
                {
                    var key = httpContext.Connection.RemoteIpAddress?.ToString() ?? "unknown";
                    return RateLimitPartition.GetFixedWindowLimiter(
                        partitionKey: key,
                        factory: _ => new FixedWindowRateLimiterOptions
                        {
                            PermitLimit = 10,
                            Window = TimeSpan.FromMinutes(1),
                            QueueProcessingOrder = QueueProcessingOrder.OldestFirst,
                            QueueLimit = 0
                        });
                });

                // Политика для /auth/register — 3 запроса/мин на IP
                options.AddPolicy("ip-register", httpContext =>
                {
                    var key = httpContext.Connection.RemoteIpAddress?.ToString() ?? "unknown";
                    return RateLimitPartition.GetFixedWindowLimiter(
                        partitionKey: key,
                        factory: _ => new FixedWindowRateLimiterOptions
                        {
                            PermitLimit = 3,
                            Window = TimeSpan.FromMinutes(1),
                            QueueProcessingOrder = QueueProcessingOrder.OldestFirst,
                            QueueLimit = 0
                        });
                });
            });

            return services;
        }

        /// <summary>
        /// Подключает middleware лимитирования запросов.
        /// </summary>
        public static IApplicationBuilder UseAuthRateLimiting(this IApplicationBuilder app)
            => app.UseRateLimiter();
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Api\Extensions\SwaggerExtensions.cs =====
using System.IO;
using System.Reflection;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.OpenApi.Models;

namespace OnlineStore.Api.Extensions
{
    /// <summary>
    /// Расширения для настройки Swagger с поддержкой JWT (Authorize).
    /// </summary>
    public static class SwaggerExtensions
    {
        /// <summary>
        /// Регистрирует SwaggerGen, добавляет схему безопасности "Bearer"
        /// и подключает XML-комментарии (summary/remarks) из сборки API.
        /// </summary>
        public static IServiceCollection AddSwaggerWithJwt(this IServiceCollection services)
        {
            services.AddSwaggerGen(c =>
            {
                // Базовая информация о документе
                c.SwaggerDoc("v1", new OpenApiInfo
                {
                    Title = "OnlineStore API",
                    Version = "v1"
                });

                // HTTP Bearer схема для JWT
                var jwtScheme = new OpenApiSecurityScheme
                {
                    Name = "Authorization",
                    Type = SecuritySchemeType.Http,
                    Scheme = "bearer",
                    BearerFormat = "JWT",
                    In = ParameterLocation.Header,
                    Description = "Введите **только** JWT-токен без префикса `Bearer ` — Swagger подставит его сам."
                };

                c.AddSecurityDefinition("Bearer", jwtScheme);

                // Глобальное требование наличия схемы авторизации
                c.AddSecurityRequirement(new OpenApiSecurityRequirement
                {
                    {
                        new OpenApiSecurityScheme
                        {
                            Reference = new OpenApiReference
                            {
                                Type = ReferenceType.SecurityScheme,
                                Id = "Bearer"
                            }
                        },
                        Array.Empty<string>()
                    }
                });

                // === Подключение XML-комментариев ===
                // Включи в csproj генерацию XML: <GenerateDocumentationFile>true</GenerateDocumentationFile>
                // Тогда summary/remarks из контроллеров и моделей попадут в Swagger UI.
                var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";
                var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);
                if (File.Exists(xmlPath))
                {
                    // includeControllerXmlComments:true — чтобы тянуть xml-комменты и для контроллеров
                    c.IncludeXmlComments(xmlPath, includeControllerXmlComments: true);
                }
            });

            return services;
        }
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Api\Extensions\ValidationExtensions.cs =====
using FluentValidation;                                   // регистрируем валидаторы
using FluentValidation.AspNetCore;                      // интеграция с ASP.NET Core
using Microsoft.AspNetCore.Mvc;                         // ApiBehaviorOptions
using Microsoft.Extensions.DependencyInjection;
using OnlineStore.Application.Validation.Auth;
using System.Linq;

namespace OnlineStore.Api.Extensions
{
    /// <summary>
    /// Расширения для подключения FluentValidation и унификации ответа 400 (ProblemDetails).
    /// </summary>
    public static class ValidationExtensions
    {
        /// <summary>
        /// Подключает FluentValidation: авто-валидацию и регистрацию валидаторов из сборки Application.
        /// Также настраивает единый ответ 400 с детализированным списком ошибок.
        /// </summary>
        public static IServiceCollection AddAppValidation(this IServiceCollection services)
        {
            // 1) Подключаем авто-валидацию: FluentValidation выполняется автоматически при биндинге моделей
            services.AddFluentValidationAutoValidation();

            // 2) Ищем и регистрируем все валидаторы из сборки, где находится выбранный валидатор.
            //    Выберите любой валидатор из вашего слоя Application, чтобы заставить сканировать ту сборку.
            services.AddValidatorsFromAssemblyContaining<RegisterRequestValidator>();

            // 3) Настраиваем единый ответ при невалидной модели (400) в стиле ProblemDetails.
            services.Configure<ApiBehaviorOptions>(options =>
            {
                options.InvalidModelStateResponseFactory = context =>
                {
                    // Собираем ошибки в удобный вид: field -> [messages]
                    var errors = context.ModelState
                        .Where(kvp => kvp.Value?.Errors?.Count > 0)
                        .ToDictionary(
                            kvp => kvp.Key,                                       // имя поля/пути
                            kvp => kvp.Value!.Errors.Select(e => e.ErrorMessage)  // сообщения
                        );

                    // Формируем стандартный ProblemDetails на 400
                    var problem = new ValidationProblemDetails(context.ModelState)
                    {
                        Status = StatusCodes.Status400BadRequest,
                        Title = "Validation Failed",
                        Detail = "One or more validation errors occurred.",
                        Type = "https://tools.ietf.org/html/rfc7231#section-6.5.1" // для вида
                    };

                    // По желанию: можно положить «плоский» объект с ошибками в Extensions.
                    // Тогда фронту проще показывать ошибки по полям.
                    problem.Extensions["errorsByField"] = errors;

                    return new BadRequestObjectResult(problem)
                    {
                        ContentTypes = { "application/problem+json", "application/problem+xml" }
                    };
                };
            });

            return services;
        }
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Api\Middlewares\ExceptionHandlingMiddleware.cs =====
using System.Net.Mime;
using System.Text.Json;
using Microsoft.AspNetCore.Mvc;
using OnlineStore.Application.Exceptions;

namespace OnlineStore.Api.Middlewares
{
    public sealed class ExceptionHandlingMiddleware
    {
        private readonly RequestDelegate _next;
        private readonly ILogger<ExceptionHandlingMiddleware> _logger;

        private static readonly JsonSerializerOptions JsonOpts = new(JsonSerializerDefaults.Web)
        {
            WriteIndented = false
        };

        public ExceptionHandlingMiddleware(RequestDelegate next, ILogger<ExceptionHandlingMiddleware> logger)
        {
            _next = next;
            _logger = logger;
        }

        public async Task Invoke(HttpContext ctx)
        {
            try
            {
                await _next(ctx);
            }
            catch (UnauthorizedAppException ex)
            {
                await WriteProblem(ctx, StatusCodes.Status401Unauthorized, "Unauthorized", ex.Message);
            }
            catch (ForbiddenAppException ex)
            {
                await WriteProblem(ctx, StatusCodes.Status403Forbidden, "Forbidden", ex.Message);
            }
            catch (NotFoundException ex)
            {
                await WriteProblem(ctx, StatusCodes.Status404NotFound, "Not Found", ex.Message);
            }
            catch (ConflictAppException ex)
            {
                await WriteProblem(ctx, StatusCodes.Status409Conflict, "Conflict", ex.Message);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Unhandled");
                await WriteProblem(ctx, StatusCodes.Status500InternalServerError, "Server error",
                    "Произошла непредвиденная ошибка.");
            }
        }

        // Пока не используется, но может пригодиться, оставил.
        private static string GetTitle(int status) => status switch
        {
            StatusCodes.Status400BadRequest => "Некорректный запрос",
            StatusCodes.Status401Unauthorized => "Не авторизован",
            StatusCodes.Status403Forbidden => "Доступ запрещён",
            StatusCodes.Status404NotFound => "Не найдено",
            StatusCodes.Status409Conflict => "Конфликт",
            _ => "Ошибка"
        };

        // Helper
        private static async Task WriteProblem(HttpContext ctx, int statusCode, string title, string detail)
        {
            // Заголовки до записи тела
            ctx.Response.ContentType = MediaTypeNames.Application.ProblemJson;
            ctx.Response.StatusCode = statusCode;

            var problem = new ProblemDetails
            {
                Type = $"https://httpstatuses.com/{statusCode}",
                Title = title,
                Status = statusCode,
                Detail = detail,
                Instance = ctx.Request.Path
            };
            problem.Extensions["traceId"] = ctx.TraceIdentifier;

            var payload = JsonSerializer.Serialize(problem, JsonOpts);
            await ctx.Response.WriteAsync(payload);
        }
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Api\Program.cs =====
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.HttpOverrides;
using System.Net;
using OnlineStore.Infrastructure.Persistence;    // AppDbContext
using OnlineStore.Infrastructure.Extensions;    // AddInfrastructure, AddJwtAuthentication
using OnlineStore.Application.Extensions;       // AddMappings
using OnlineStore.Api.Middlewares;              // ExceptionHandlingMiddleware
using OnlineStore.Api.Extensions;
using System.Text.Json.Serialization;               // AddAuthRateLimiting, AddSwaggerWithJwt

var builder = WebApplication.CreateBuilder(args);

// 1) БД
builder.Services.AddDbContext<AppDbContext>(options =>
    options.UseNpgsql(builder.Configuration.GetConnectionString("DefaultConnection"))
           .UseSnakeCaseNamingConvention());

// 2) Сервисы слоя Infrastructure (репозитории, фабрики и т.п.)
builder.Services.AddInfrastructure();

// 3) JWT-аутентификация (ЕДИНСТВЕННАЯ точка регистрации схемы "Bearer")
builder.Services.AddJwtAuthentication(builder.Configuration);

// 4) Авторизация (политики/роли)
builder.Services.AddAuthorization(options =>
{
    options.AddPolicy("AdminOnly", p => p.RequireRole("Admin"));
});

// 5) Контроллеры + маппинги. Так же прячем значения равные null из файла json
builder.Services
    .AddControllers()
    .AddJsonOptions(opst =>
    {
        opst.JsonSerializerOptions.DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull;
    });

builder.Services.AddMappings(); // AutoMapper профили из Application

// 6) Rate Limiting и Swagger
builder.Services.AddAuthRateLimiting();
builder.Services.AddSwaggerWithJwt();

// 7) CORS (AllowCredentials для refresh-cookie). Источники — из конфигурации.
builder.Services.AddCors(opt =>
{
    var origins = builder.Configuration["Cors:Origins"]?
        .Split(';', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries)
        ?? new[] { "http://localhost:5173" }; // DEV fallback

    opt.AddPolicy("Frontend", p =>
        p.WithOrigins(origins)
         .AllowAnyHeader()
         .AllowAnyMethod()
         .AllowCredentials());
});

var app = builder.Build();

// 8) За обратным прокси / nginx — корректно получаем реальный IP и схему
app.UseForwardedHeaders(new ForwardedHeadersOptions
{
    ForwardedHeaders = ForwardedHeaders.XForwardedFor | ForwardedHeaders.XForwardedProto,
    KnownProxies = { IPAddress.Parse("10.0.0.2") } // <-- IP вашего nginx/прокси
    // или KnownNetworks = { new(IPAddress.Parse("10.0.0.0"), 8) }
});

// 9) Глобальный обработчик ошибок — как можно выше в пайплайне
app.UseMiddleware<ExceptionHandlingMiddleware>();

// 10) Swagger — в Dev/Local
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}
else
{
    app.UseHttpsRedirection();
    app.UseHsts();
}

// 12) CORS (до аутентификации)
app.UseCors("Frontend");

// 13) Лимитер, аутентификация и авторизация
app.UseAuthRateLimiting(); // внутри вызывает UseRateLimiter()
app.UseAuthentication();
app.UseAuthorization();

// 14) Маршруты
app.MapControllers();

app.Run();

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Api\Security\UserExtensions.cs =====
using System.Security.Claims;

namespace OnlineStore.Api.Security
{
    public static class UserExtensions
    {
        public static Guid GetUserId(this ClaimsPrincipal user)
        {
            var id = user.FindFirstValue(ClaimTypes.NameIdentifier)
                     ?? user.FindFirstValue("sub");

            if (string.IsNullOrWhiteSpace(id) || !Guid.TryParse(id, out var guid))
                throw new UnauthorizedAccessException("Некорректный идентификатор пользователя в токене.");

            return guid;
        }
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Application\DTOs\Auth\AuthResponse.cs =====
using System.Text.Json.Serialization;

namespace OnlineStore.Application.DTOs.Auth
{
    /// <summary>
    /// Ответ аутентификации для клиента.
    /// Access-токен отдаём в теле, refresh-токен уходит только в HttpOnly cookie.
    /// </summary>
    public class AuthResponse
    {
        /// <summary>Email пользователя.</summary>
        public string Email { get; set; } = default!;

        /// <summary>JWT access token.</summary>
        public string Token { get; set; } = default!;

        /// <summary>
        /// Сырой refresh-токен (используется контроллером, чтобы положить в cookie).
        /// В ответе JSON **не сериализуется**.
        /// </summary>
        [JsonIgnore] 
        public string? RefreshToken { get; set; }
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Application\DTOs\Auth\ChangePasswordRequest.cs =====
namespace OnlineStore.Application.DTOs.Auth
{
    /// <summary>
    /// Запрос на смену пароля текущего пользователя.
    /// </summary>
    public class ChangePasswordRequest
    {
        // Текущий (старый) пароль — для подтверждения владения аккаунтом
        public string CurrentPassword { get; set; } = null!;

        // Новый пароль
        public string NewPassword { get; set; } = null!;
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Application\DTOs\Auth\LoginRequest.cs =====
namespace OnlineStore.Application.DTOs.Auth
{
    /// <summary>
    /// DTO для входа по email и паролю.
    /// </summary>
    public class LoginRequest
    {
        public string Email { get; set; } = string.Empty;

        public string Password { get; set; } = string.Empty;
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Application\DTOs\Auth\RefreshRequest.cs =====
namespace OnlineStore.Application.DTOs.Auth
{
    public class RefreshRequest
    {
        public string RefreshToken { get; set; } = null!;
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Application\DTOs\Auth\RegisterRequest.cs =====
namespace OnlineStore.Application.DTOs.Auth
{
    /// <summary>
    /// DTO для регистрации нового пользователя.
    /// </summary>
    public class RegisterRequest
    {
        public string Email { get; set; } = string.Empty;

        public string Password { get; set; } = string.Empty;
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Application\DTOs\Auth\UserProfileDto.cs =====
namespace OnlineStore.Application.DTOs.Auth
{
    /// <summary>
    /// Данные профиля текущего пользователя.
    /// </summary>
    public class UserProfileDto
    {
        // Идентификатор пользователя
        public Guid Id { get; set; }

        // Email пользователя
        public string Email { get; set; } = null!;

        // Дата создания профиля
        public DateTime CreatedAt { get; set; }
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Application\DTOs\SessionDto.cs =====
namespace OnlineStore.Application.DTOs.Auth
{
    /// <summary>
    /// Короткая проекция refresh-сессии для UI/Swagger.
    /// </summary>
    public class SessionDto
    {
        public Guid Id { get; set; }                 // Id refresh-токена (в БД)
        public DateTime CreatedAt { get; set; }      // Когда создан
        public DateTime ExpiresAt { get; set; }      // Когда истечёт
        public string? CreatedByIp { get; set; }     // IP при создании
        public string? CreatedByUa { get; set; }     // User-Agent при создании
        public bool IsActive { get; set; }           // Активен ли сейчас
        public bool IsCurrent { get; set; }          // Можно отметить текущую сессию (на шаге 4)
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Application\Exceptions\AppException.cs =====
using System.Net;

namespace OnlineStore.Application.Exceptions
{
    /// <summary>
    /// Базовое прикладное исключение с HTTP-статусом (без зависимости от ASP.NET).
    /// </summary>
    public abstract class AppException : Exception
    {
        // Храним стандартный статус из BCL
        public HttpStatusCode StatusCode { get; }

        protected AppException(string message, HttpStatusCode statusCode) : base(message)
        {
            StatusCode = statusCode;
        }
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Application\Exceptions\ConflictAppException.cs =====
// Исключение уровня приложения для конфликтов (HTTP 409 Conflict)
// Сценарии: дубликат email при регистрации, конфликт версий и т.п.

using System.Net;

namespace OnlineStore.Application.Exceptions
{
    // Класс обработчик ошибок
    public sealed class ConflictAppException : AppException
    {
        public ConflictAppException(string message) : base(message, HttpStatusCode.Conflict) { }
    }

}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Application\Exceptions\ForbiddenAppException.cs =====
using System.Net;

namespace OnlineStore.Application.Exceptions
{
    public sealed class ForbiddenAppException : AppException
    {
        public ForbiddenAppException(string message = "Доступ запрещён")
            : base(message, HttpStatusCode.Forbidden)
        {
            // Дополнительная логика, если нужна
        }
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Application\Exceptions\NotFoundException.cs =====
using System.Net;

namespace OnlineStore.Application.Exceptions
{
    public sealed class NotFoundException : AppException
    {
        public NotFoundException(string message) : base(message, HttpStatusCode.NotFound)
        {
            // Дополнительная логика, если нужна
        }
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Application\Exceptions\UnauthorizedAppException.cs =====
using System.Net;

namespace OnlineStore.Application.Exceptions
{
    public sealed class UnauthorizedAppException : AppException
    {
        public UnauthorizedAppException(string message = "Не авторизован") : base(message, HttpStatusCode.Unauthorized)
        {
            // Дополнительная логика, если нужна
        }
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Application\Extensions\MappingServiceCollectionExtensions.cs =====
using Microsoft.Extensions.DependencyInjection;

namespace OnlineStore.Application.Extensions
{
    /// <summary>
    /// Регистрация только AutoMapper-профилей из сборки Application.
    /// Никаких инфраструктурных сервисов тут быть не должно.
    /// </summary>
    public static class MappingServiceCollectionExtensions
    {
        public static IServiceCollection AddMappings(this IServiceCollection services)
        {
            // Подтянуть все Profile из текущей сборки (Application)
            services.AddAutoMapper(typeof(MappingServiceCollectionExtensions).Assembly);
            return services;
        }
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Application\Interfaces\Repositories\IRefreshTokenRepository.cs =====
using OnlineStore.Domain.Entities;

namespace OnlineStore.Application.Interfaces.Repositories
{
    public interface IRefreshTokenRepository
    {
        Task AddAsync(RefreshToken entity);
        Task<RefreshToken?> GetByHashAsync(string hash);
        Task RevokeAsync(RefreshToken token, string? ip);
        Task RevokeAllForUserAsync(Guid userId, string? ip);
        Task<IReadOnlyList<RefreshToken>> GetActiveByUserAsync(Guid userId, CancellationToken ct = default);
        Task<RefreshToken?> GetByIdAsync(Guid id, CancellationToken ct = default);
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Application\Interfaces\Repositories\IUserRepository.cs =====
using OnlineStore.Domain.Entities;

namespace OnlineStore.Application.Interfaces.Repositories
{
    public interface IUserRepository
    {
        // Метод получения пользователя по его уникальному идентификатору
        Task<User?> GetByIdAsync(Guid id);

        // Метод получения пользователя по нормализованному email
        Task<User?> GetByNormalizedEmailAsync(string normalized);

        // Метод добавления нового пользователя
        Task AddAsync(User user);

        // Метод обновления хеша пароля пользователя
        // Используется при смене пароля для обновления хеша в базе данных
        Task UpdatePasswordHashAsync(Guid userId, string newPasswordHash);
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Application\Interfaces\Services\IAuthService.cs =====
using OnlineStore.Application.DTOs.Auth;

namespace OnlineStore.Application.Interfaces.Services
{
    /// <summary>
    /// Интерфейс сервиса аутентификации и регистрации пользователей.
    /// </summary>
    public interface IAuthService
    {
        // Регистрация нового пользователя, обрабатывает запрос на регистрацию
        Task<AuthResponse> RegisterAsync(RegisterRequest request);

        // Вход по email и паролю, обрабатывает запрос на вход
        Task<AuthResponse> LoginAsync(LoginRequest request);

        // Получение профиля пользователя по его идентификатору
        // Возвращает профиль пользователя, если он существует
        Task<UserProfileDto> GetProfileAsync(Guid userId);

        // Изменение пароля текущего пользователя
        // Принимает идентификатор пользователя и новый пароль, обновляет пароль в системе
        Task ChangePasswordAsync(Guid userId, ChangePasswordRequest request, CancellationToken ct = default);

        Task<AuthResponse> RefreshAsync(RefreshRequest request, string? ip = null, string? ua = null);
        Task LogoutAsync(string refreshToken, string? ip = null);
        Task<IReadOnlyList<SessionDto>> GetSessionsAsync(Guid userId, CancellationToken ct = default);
        Task LogoutAllAsync(Guid userId, string? ip = null, CancellationToken ct = default);
        Task LogoutSessionAsync(Guid userId, Guid tokenId, string? ip = null, CancellationToken ct = default);

    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Application\Interfaces\Services\IUsersService.cs =====
using System;
using System.Threading;
using System.Threading.Tasks;

namespace OnlineStore.Application.Interfaces.Services
{
    public interface IUsersService
    {
        // Добавить пользователи права администратора
        Task MakeAdminAsync(Guid userId, CancellationToken ct = default);
        // Забрать у пользователя права администратора
        Task RemoveAdminAsync(Guid userId, CancellationToken ct = default);
        // Мягкое удаление пользователя (без физического удаления из БД)
        Task SoftDeleteAsync(Guid userId, CancellationToken ct = default);
        // Восстановление пользователя
        Task RestoreAsync(Guid userId, CancellationToken ct = default);
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Application\Mappings\UserProfile.cs =====
using AutoMapper;
using OnlineStore.Domain.Entities;
using OnlineStore.Application.DTOs.Auth;

namespace OnlineStore.Application.Mappings
{
    public class UserProfile : Profile
    {
        public UserProfile()
        {
            // Entity -> DTO для /auth/me
            CreateMap<User, UserProfileDto>();

            // DTO -> Entity (для регистрации) — если когда-нибудь понадобится
            CreateMap<RegisterRequest, User>()
                .ForMember(dest => dest.Id, opt => opt.Ignore())
                .ForMember(dest => dest.PasswordHash, opt => opt.Ignore())
                .ForMember(dest => dest.NormalizedEmail, opt => opt.Ignore())
                .ForMember(dest => dest.CreatedAt, opt => opt.Ignore());
        }
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Application\Validation\Auth\ChangePasswordRequestValidator.cs =====
using FluentValidation;
using OnlineStore.Application.DTOs.Auth;
using OnlineStore.Application.Validation.Extensions;

namespace OnlineStore.Application.Validation.Auth
{
    /// <summary>
    /// Правила валидации смены пароля.
    /// </summary>
    public sealed class ChangePasswordRequestValidator : AbstractValidator<ChangePasswordRequest>
    {
        public ChangePasswordRequestValidator()
        {
            RuleFor(x => x.CurrentPassword)
                .Cascade(CascadeMode.Stop)
                .NotEmpty().WithMessage("Текущий пароль обязателен.")
                .MaximumLength(256);

            RuleFor(x => x.NewPassword)
                .Cascade(CascadeMode.Stop)
                .StrongPassword(); // те же строгие требования, что и при регистрации

            RuleFor(x => x)
                .Must(x => x.CurrentPassword != x.NewPassword)
                .WithMessage("Новый пароль не должен совпадать с текущим.");
        }
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Application\Validation\Auth\LoginRequestValidator.cs =====
using FluentValidation;
using OnlineStore.Application.DTOs.Auth;
using OnlineStore.Application.Validation.Extensions;

namespace OnlineStore.Application.Validation.Auth
{
    /// <summary>
    /// Правила валидации для логина (минимальные, без подсказок по сложности).
    /// </summary>
    public sealed class LoginRequestValidator : AbstractValidator<LoginRequest>
    {
        public LoginRequestValidator()
        {
            RuleFor(x => x.Email)
                .Cascade(CascadeMode.Stop)
                .NotEmpty().WithMessage("Email обязателен.")
                .EmailAddress().WithMessage("Некорректный формат email.")
                .MustHaveDomainWithTld()
                .MaximumLength(255);

            RuleFor(x => x.Password)
                .NotEmpty().WithMessage("Пароль обязателен.")
                .MaximumLength(256);
        }
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Application\Validation\Auth\RegisterRequestValidator.cs =====
using FluentValidation;
using OnlineStore.Application.DTOs.Auth;
using OnlineStore.Application.Validation.Extensions;

namespace OnlineStore.Application.Validation.Auth
{
    /// <summary>
    /// Правила валидации для регистрации пользователя.
    /// </summary>
    public sealed class RegisterRequestValidator : AbstractValidator<RegisterRequest>
    {
        public RegisterRequestValidator()
        {
            RuleFor(x => x.Email)
                .Cascade(CascadeMode.Stop)
                .NotEmpty().WithMessage("Email обязателен.")
                .MinimumLength(5).WithMessage("Минимальная длина email — 5 символов.")
                .MaximumLength(255).WithMessage("Email слишком длинный.")
                .EmailAddress().WithMessage("Неверный формат email.")
                .MustHaveDomainWithTld();

            // Каскадирование ставим снаружи перед StrongPassword()
            RuleFor(x => x.Password)
                .Cascade(CascadeMode.Stop)
                .StrongPassword();

            // Пароль не должен содержать email/локальную часть
            RuleFor(x => x)
                .Must(x => PasswordPolicy.NotContainsEmail(x.Password, x.Email))
                .WithMessage("Пароль не должен содержать ваш email.");
        }
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Application\Validation\Extensions\EmailRuleExtensions.cs =====
using FluentValidation;

namespace OnlineStore.Application.Validation.Extensions
{
    // Проверяет, что email содержит доменную зону с TLD (типа .com, .ru)
    public static class EmailRuleExtensions
    {
        public static IRuleBuilderOptions<T, string> MustHaveDomainWithTld<T>(this IRuleBuilder<T, string> rule)
        {
            return rule.Must(email =>
            {
                if (string.IsNullOrWhiteSpace(email)) return false;
                try
                {
                    var addr = new System.Net.Mail.MailAddress(email.Trim());
                    var host = addr.Host;
                    var lastDot = host.LastIndexOf('.');
                    if (lastDot <= 0 || lastDot == host.Length - 1) return false;
                    var tld = host[(lastDot + 1)..];
                    return tld.Length >= 2 && tld.Length <= 63;
                }
                catch { return false; }
            })
            .WithMessage("Email должен содержать доменную зону (например, .com).");
        }
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Application\Validation\Extensions\PasswordPolicy.cs =====
namespace OnlineStore.Application.Validation.Extensions
{
    public static class PasswordPolicy
    {
        public static bool HasUpper(string s) => s.Any(char.IsUpper);
        public static bool HasLower(string s) => s.Any(char.IsLower);
        public static bool HasDigit(string s) => s.Any(char.IsDigit);
        public static bool HasSpecial(string s) => s.Any(ch => !char.IsLetterOrDigit(ch));
        public static bool NoWhitespace(string s) => !s.Any(char.IsWhiteSpace);

        public static bool NotContainsEmail(string password, string email)
        {
            if (string.IsNullOrWhiteSpace(password) || string.IsNullOrWhiteSpace(email)) return true;
            var trimmed = password.Trim();
            var local = email.Split('@')[0];
            return !trimmed.Contains(email, StringComparison.OrdinalIgnoreCase)
                && !trimmed.Contains(local, StringComparison.OrdinalIgnoreCase);
        }
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Application\Validation\Extensions\PasswordRuleExtensions.cs =====
using FluentValidation;

namespace OnlineStore.Application.Validation.Extensions
{
    /// <summary>
    /// Расширения FluentValidation для единых «сильных» правил паролей.
    /// ВНИМАНИЕ: каскадирование (CascadeMode.Stop) выставляйте в валидаторе перед вызовом StrongPassword().
    /// </summary>
    public static class PasswordRuleExtensions
    {
        /// <summary>
        /// Строгие требования к паролю:
        /// - не пустой, длина 8..100;
        /// - нет пробелов в начале/конце и внутри;
        /// - есть заглавная, строчная, цифра, спецсимвол.
        /// </summary>
        public static IRuleBuilderOptions<T, string> StrongPassword<T>(this IRuleBuilder<T, string> rule)
        {
            return rule
                .NotEmpty().WithMessage("Пароль обязателен.")
                .MinimumLength(8).WithMessage("Минимальная длина пароля — 8 символов.")
                .MaximumLength(100).WithMessage("Пароль слишком длинный.")
                .Must(p => p.Trim() == p).WithMessage("Пароль не должен начинаться/заканчиваться пробелами.")
                .Must(PasswordPolicy.NoWhitespace).WithMessage("Пароль не должен содержать пробелы.")
                .Must(PasswordPolicy.HasUpper).WithMessage("Нужна заглавная буква.")
                .Must(PasswordPolicy.HasLower).WithMessage("Нужна строчная буква.")
                .Must(PasswordPolicy.HasDigit).WithMessage("Нужна цифра.")
                .Must(PasswordPolicy.HasSpecial).WithMessage("Нужен спецсимвол.");
        }
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Client\Dtos\AuthResponseDto.cs =====
namespace OnlineStore.Client.Dtos
{
    public sealed class AuthResponseDto
    {
        public string Email { get; set; } = default!;
        public string Token { get; set; } = default!;
        public string? RefreshToken { get; set; }
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Client\Http\BearerAuthHandler.cs =====
using System.Net;
using System.Net.Http.Headers;
using System.Text;
using System.Text.Json;

namespace OnlineStore.Client.Http
{
    /// <summary>
    /// DelegatingHandler:
    ///  - добавляет Bearer access-токен;
    ///  - при 401 один раз пытается получить новый access через /api/auth/refresh (refresh в HttpOnly cookie);
    ///  - повторяет исходный запрос.
    /// </summary>
    public class BearerAuthHandler : DelegatingHandler
    {
        private readonly ITokenStore _tokenStore;
        private readonly string _baseUrl; // например, "https://localhost:5232"
        private static readonly JsonSerializerOptions JsonOpts = new(JsonSerializerDefaults.Web);

        public BearerAuthHandler(ITokenStore tokenStore, string baseUrl)
        {
            _tokenStore = tokenStore;
            _baseUrl = baseUrl.TrimEnd('/');
        }

        protected override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
        {
            // 1) Подставить текущий access
            var access = _tokenStore.GetToken();
            if (!string.IsNullOrWhiteSpace(access))
            {
                request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", access);
            }

            // 2) Обычный запрос
            var response = await base.SendAsync(request, cancellationToken);
            if (response.StatusCode != HttpStatusCode.Unauthorized)
                return response;

            // 3) Одна попытка рефреша
            response.Dispose();

            var refreshed = await TryRefreshAsync(cancellationToken);
            if (!refreshed)
            {
                _tokenStore.Clear();
                // Возвращаем 401 наверх — клиент решит (редирект на логин и т.п.)
                return new HttpResponseMessage(HttpStatusCode.Unauthorized)
                {
                    RequestMessage = request
                };
            }

            // 4) Повтор исходного запроса с новым access
            var retry = await CloneRequestAsync(request, cancellationToken);
            var newAccess = _tokenStore.GetToken();
            if (!string.IsNullOrWhiteSpace(newAccess))
            {
                retry.Headers.Authorization = new AuthenticationHeaderValue("Bearer", newAccess);
            }
            return await base.SendAsync(retry, cancellationToken);
        }

        private async Task<bool> TryRefreshAsync(CancellationToken ct)
        {
            using var req = new HttpRequestMessage(HttpMethod.Post, $"{_baseUrl}/api/auth/refresh");
            // ТЕЛА НЕТ — refresh возьмётся из HttpOnly cookie (CookieContainer внутри HttpClientHandler)
            using var resp = await base.SendAsync(req, ct);
            if (!resp.IsSuccessStatusCode) return false;

            // ожидаем { email, token, refreshToken:null }
            using var stream = await resp.Content.ReadAsStreamAsync(ct);
            var doc = await JsonDocument.ParseAsync(stream, cancellationToken: ct);
            if (!doc.RootElement.TryGetProperty("token", out var tokenProp))
                return false;

            var newAccess = tokenProp.GetString();
            if (string.IsNullOrWhiteSpace(newAccess)) return false;

            _tokenStore.SetToken(newAccess);
            return true;
        }

        private static async Task<HttpRequestMessage> CloneRequestAsync(HttpRequestMessage original, CancellationToken ct)
        {
            var clone = new HttpRequestMessage(original.Method, original.RequestUri)
            {
                Version = original.Version,
                VersionPolicy = original.VersionPolicy
            };

            if (original.Content is not null)
            {
                // читаем тело асинхронно
                var bytes = await original.Content.ReadAsByteArrayAsync(ct);
                clone.Content = new ByteArrayContent(bytes);

                // переносим заголовки контента
                foreach (var h in original.Content.Headers)
                    clone.Content.Headers.TryAddWithoutValidation(h.Key, h.Value);
            }

            // переносим заголовки запроса
            foreach (var h in original.Headers)
                clone.Headers.TryAddWithoutValidation(h.Key, h.Value);

            return clone;
        }
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Client\Http\ITokenStore.cs =====
namespace OnlineStore.Client.Http
{
    /// <summary>
    /// Память для access-токена. В проде можно заменить на IDistributedCache/IMemoryCache, 
    /// но хранить access на клиенте: ТОЛЬКО в памяти.
    /// </summary>
    public interface ITokenStore
    {
        string? GetToken();
        void SetToken(string token);
        void Clear();
    }

    public class InMemoryTokenStore : ITokenStore
    {
        private string? _token;
        private readonly object _lock = new();

        public string? GetToken()
        {
            lock (_lock) return _token;
        }

        public void SetToken(string token)
        {
            lock (_lock) _token = token;
        }

        public void Clear()
        {
            lock (_lock) _token = null;
        }
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Client\Program.cs =====
using System.Net;
using System.Net.Http.Json;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using OnlineStore.Client.Dtos;
using OnlineStore.Client.Http;

const string baseUrl = "http://localhost:5232";

var host = Host.CreateDefaultBuilder(args)
    .ConfigureServices(services =>
    {
        // 1) InMemory хранилище access-токена
        services.AddSingleton<ITokenStore, InMemoryTokenStore>();

        // 2) Общий CookieContainer — HttpOnly cookie 'rt' живёт между вызовами
        services.AddSingleton(new CookieContainer());

        // 3) HttpClient + DelegatingHandler
        services.AddTransient(sp =>
            new BearerAuthHandler(sp.GetRequiredService<ITokenStore>(), baseUrl));

        services.AddHttpClient("api", client =>
        {
            client.BaseAddress = new Uri(baseUrl);
        })
        .ConfigurePrimaryHttpMessageHandler(sp => new HttpClientHandler
        {
            CookieContainer = sp.GetRequiredService<CookieContainer>(),
            UseCookies = true,
            AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate,
            // На время разработки можно доверить дев-сертификат:
            // ServerCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator
        })
        .AddHttpMessageHandler<BearerAuthHandler>();
    })
    .Build();

// создаём scope и берём клиент
using var scope = host.Services.CreateScope();
var sp = scope.ServiceProvider;
var http = sp.GetRequiredService<IHttpClientFactory>().CreateClient("api");

// === ДЕМО ПОТОК ===

// 1) Login: refresh попадёт в HttpOnly cookie, access вернётся в body
var loginResp = await http.PostAsJsonAsync("/api/auth/login", new
{
    email = "admin@onlinestore.local",
    password = "Admin#12345"
});
loginResp.EnsureSuccessStatusCode();

var loginDto = await loginResp.Content.ReadFromJsonAsync<AuthResponseDto>();
if (loginDto is null) throw new Exception("Не удалось разобрать ответ логина");
sp.GetRequiredService<ITokenStore>().SetToken(loginDto.Token);
Console.WriteLine($"Login OK, email={loginDto.Email}");

// 2) Запрос к защищённому API. Если 401 — Handler сам сделает /auth/refresh и повторит запрос
var me = await http.GetAsync("/api/auth/sessions");
me.EnsureSuccessStatusCode();
Console.WriteLine("GET /api/auth/sessions OK");

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Domain\Entities\Cart.cs =====
namespace OnlineStore.Domain.Entities
{
    /// <summary>
    /// Корзина пользователя
    /// </summary>
    public class Cart
    {
        // Уникальный идентификатор корзины
        public Guid Id { get; set; }

        // Ccвязь с пользователем
        // 1:1 связь с сущностью User
        public Guid UserId { get; set; }

        // Навигационное свойство к пользователю
        public User User { get; set; } = null!;

        // Коллекция элементов корзины
        // 1:N связь с сущностью CartItem

        public ICollection<CartItem> CartItems { get; set; } = new List<CartItem>();
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Domain\Entities\CartItem.cs =====
namespace OnlineStore.Domain.Entities

{
    /// <summary>
    /// Элемент корзины. Может ссылаться на модель или проект
    /// </summary>
    public class CartItem
    {
        // Уникальный идентификатор элемента корзины
        public Guid Id { get; set; }

        // Внешний ключ к корзине
        public Guid CartId { get; set; }

        // Внешний ключ к 3D модели (null - если это Проект)
        public Guid? Model3DId { get; set; }

        // Внешний ключ к проекту (null - если это 3D модель)
        public Guid? ProjectId { get; set; }

        // Дата добавления товара в корзину
        public DateTime AddedAt { get; set; }



        // Навигационные Свойства
        public Model3D? Model3D { get; set; }

        public Cart Cart { get; set; } = null!;

        public Project? Project { get; set; }
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Domain\Entities\Model3D.cs =====
namespace OnlineStore.Domain.Entities

{
    /// <summary>
    /// 3D-модель, доступная для покупки или в составе проекта
    /// </summary>
    public class Model3D
    {
        // Уникальный идентификатор модели
        public Guid Id { get; set; }

        // Название модели
        public string Name { get; set; } = null!;

        // Описание модели
        public string Description { get; set; } = null!;

        // Стоимость модели
        public decimal Price { get; set; }

        // Ссылка на внешний источник
        public string? CompanyUrl { get; set; }

        // Дата добавления модели
        public DateTime CreatedAt { get; set; }

        // Навинационное свойство
        public Guid? ProjectId { get; set; }

        // Навигационное свойство к проекту
        public Project? Project { get; set; }

        // Галерея изображений модели
        public ICollection<ModelImage> Images { get; set; } = new List<ModelImage>();
        // Список позиций заказа, связанных с моделью
        public ICollection<OrderItem>? OrderItems { get; set; }
        // Список позиций в корзине, связанных с моделью
        public ICollection<CartItem>? CartItems { get; set; }
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Domain\Entities\ModelImage.cs =====
namespace OnlineStore.Domain.Entities
{
    /// <summary>
    /// Изображение, привязанное к 3D-модели
    /// </summary>
    public class ModelImage
    {
        // Уникальный идентификатор изображения
        public Guid Id { get; set; }

        // Путь к изображению
        public string ImageUrl { get; set; } = null!;

        // Описание изображения
        public string? Description { get; set; }

        // Порядок отображения в галерее
        public int Order { get; set; }

        // Является ли изображение обложкой
        public bool IsPreview { get; set; }

        // Внешний ключ к 3D-модели
        public Guid Model3DId { get; set; }

        // Навигационное свойство к 3D-модели
        public Model3D Model3D { get; set; } = null!;
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Domain\Entities\Order.cs =====
namespace OnlineStore.Domain.Entities
{
    public class Order
    {
        // Уникальный идентификатор заказа
        public Guid Id { get; set; }

        // Внешний ключ к пользователю, который сделал заказ
        public Guid UserId { get; set; }

        // Дата создания заказа
        public DateTime CreatedAt { get; set; }

        // Сумма заказа
        public decimal TotalAmount { get; set; }

        // Список 3D-моделей в заказе
        public User User { get; set; } = null!;

        // Список позиций заказа
        public ICollection<OrderItem> OrderItems { get; set; } = new List<OrderItem>();
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Domain\Entities\OrderItem.cs =====
namespace OnlineStore.Domain.Entities
{
    public class OrderItem
    {
        // Уникальный идентификатор элемента заказа
        public Guid Id { get; set; }

        // Внешний ключ к заказу
        public Guid OrderId { get; set; }

        // Внешний ключ к 3D-модели
        public Guid? Model3DId { get; set; }

        // Внешний ключ к проекту
        public Guid? ProjectId { get; set; }

        // Цену на момент покупки
        public decimal PriceAtPurchase { get; set; }

        // Связь с заказом, не может быть null
        public Order Order { get; set; } = null!;

        // Связь с 3D-моделью (null если выбран проект)
        public Model3D? Model3D { get; set; }

        // Связь с проектом (null если выбрана модель)
        public Project? Project { get; set; }
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Domain\Entities\Project.cs =====
namespace OnlineStore.Domain.Entities

{
    /// <summary>
    /// Проект, объединяющий несколько моделей
    /// </summary>
    public class Project
    {
        // Уникальный идентификатор проекта
        public Guid Id { get; set; }

        // Название проекта
        public string Name { get; set; } = null!;

        // Описание проекта
        public string? Description { get; set; }

        // Цена проекта
        public decimal Price { get; set; }

        // Ссылка на внешний источник
        public string? CompanyUrl { get; set; }

        // Дата создания проекта
        public DateTime CreatedAt { get; set; }

        // Список 3D-моделей в проекте
        public ICollection<Model3D> Models { get; set; } = new List<Model3D>();

        // Галерея изображений проекта
        public ICollection<ProjectImage> Images { get; set; } = new List<ProjectImage>();

        // Список позиций заказа, связанных с проектом
        // (может быть null, если проект не был куплен)
        public ICollection<OrderItem>? OrderItems { get; set; }

        // Список позиций в корзине, связанных с проектом
        public ICollection<CartItem>? CartItems { get; set; }
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Domain\Entities\ProjectImage.cs =====
namespace OnlineStore.Domain.Entities
{
    /// <summary>
    /// Изображение, привязанное к проекту
    /// </summary>
    public class ProjectImage
    {
        // Уникальный идентификатор изображения
        public Guid Id { get; set; }

        // Путь к изображению
        public string ImageUrl { get; set; } = null!;

        // Описание изображения
        public string? Description { get; set; }

        // Порядок отображения в галерее
        public int Order { get; set; }

        // Является ли изображение обложкой
        public bool IsPreview { get; set; }

        // Внешний ключ к проекту
        public Guid ProjectId { get; set; }

        // Навигационное свойство к проекту
        public Project Project { get; set; } = null!;
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Domain\Entities\RefreshToken.cs =====
namespace OnlineStore.Domain.Entities
{
    // Сущность, RefreshToken
    public class RefreshToken
    {
        public Guid Id { get; set; }    // Id Токена
        public Guid UserId { get; set; }
        public string TokenHash { get; set; } = null!;   // SHA-256 от «сырого» токена
        public DateTime ExpiresAt { get; set; }
        public DateTime CreatedAt { get; set; }
        public string? CreatedByIp { get; set; }
        public string? CreatedByUa { get; set; }

        public DateTime? RevokedAt { get; set; }
        public string? RevokedByIp { get; set; }
        public Guid? ReplacedByTokenId { get; set; }     // связь на новый токен при ротации
        public bool IsActive => RevokedAt is null && DateTime.UtcNow < ExpiresAt;

        public User User { get; set; } = null!;
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Domain\Entities\User.cs =====
namespace OnlineStore.Domain.Entities
{
    /// <summary>
    /// Пользователь системы
    /// </summary>
    public class User
    {
        // Поля
        public Guid Id { get; set; }    // Уникальный идентификатор пользователя
        public string Email { get; set; } = null!;  // Email пользователя
        public string NormalizedEmail { get; set; } = null!;    // Нормализованный email (для поиска, например, в БД)
        public string PasswordHash { get; set; } = null!;   // Пороль пользователя
        public DateTime CreatedAt { get; set; } // Дата регистрации пользователя
        public bool IsAdmin { get; set; }   // Флаг Администратора
        public bool IsDeleted { get; set; } // Мягкое удаление
        public DateTime? DeletedAtUtc { get; set; } // Дата удаления
        public Guid? DeletedBy { get; set; }    // Кем удалён (Id юзера/админа)

        // Связи
        public Cart Cart { get; set; } = null!; // 1:1 связь с сущностью Cart
        public ICollection<Order>? Orders { get; set; } // 1:N связь с сущностью Order
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Infrastructure\Common\SafeLog.cs =====
namespace OnlineStore.Infrastructure.Common
{
    // Класс для безопасного логирования данных
    // Используется для маскировки чувствительной информации, такой как email и токены
    public static class SafeLog
    {
        // Метод для безопасного логирования email
        // Маскирует email, оставляя только первую букву и домен
        public static string MaskEmail(string email)
        {
            if (string.IsNullOrWhiteSpace(email)) return string.Empty;
            var parts = email.Split('@');
            if (parts.Length != 2) return "***";
            var local = parts[0];
            var maskedLocal = local.Length <= 2 ? new string('*', local.Length)
                                                : local[0] + new string('*', Math.Max(1, local.Length - 2)) + local[^1];
            return $"{maskedLocal}@{parts[1]}";
        }

        // Метод для безопасного логирования токена
        // Маскирует токен, оставляя первые 6 и последние 4 символ
        public static string MaskToken(string token)
        {
            if (string.IsNullOrEmpty(token)) return string.Empty;
            return token.Length <= 10 ? "****" : $"{token[..6]}...{token[^4..]}";
        }
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Infrastructure\Extensions\JwtServiceCollectionExtensions.cs =====
using System.Security.Claims;
using System.Text;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.IdentityModel.Tokens;
using OnlineStore.Infrastructure.Options;

namespace OnlineStore.Infrastructure.Extensions
{
    public static class JwtServiceCollectionExtensions
    {
        /// <summary>
        /// ЕДИНСТВЕННАЯ точка регистрации JWT-аутентификации ("Bearer").
        /// </summary>
        public static IServiceCollection AddJwtAuthentication(this IServiceCollection services, IConfiguration configuration)
        {
            // 1) Bind + validate JwtOptions из конфигурации
            var section = configuration.GetSection("Jwt");

            services.AddOptions<JwtOptions>()
                .Bind(section)
                .Validate(o => !string.IsNullOrWhiteSpace(o.Key) && Encoding.UTF8.GetByteCount(o.Key) >= 32,
                    "Jwt:Key must be at least 32 bytes.")
                .Validate(o => !string.IsNullOrWhiteSpace(o.Issuer), "Jwt:Issuer is required.")
                .Validate(o => !string.IsNullOrWhiteSpace(o.Audience), "Jwt:Audience is required.")
                .ValidateOnStart();

            // 2) Настраиваем аутентификацию и JwtBearer (БЕЗ перегрузки с IServiceProvider)
            services
                .AddAuthentication(options =>
                {
                    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme; // "Bearer"
                    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
                })
                .AddJwtBearer(options =>
                {
                    // читаем JwtOptions напрямую из конфигурации (их уже провалидировали выше)
                    var jwt = section.Get<JwtOptions>()!;

                    // Определяем Dev-окружение из конфигурации (без доступа к IHostEnvironment)
                    var isDev = string.Equals(
                        configuration["ASPNETCORE_ENVIRONMENT"],
                        "Development",
                        StringComparison.OrdinalIgnoreCase);

                    options.RequireHttpsMetadata = !isDev; // в Dev разрешаем без HTTPS метаданных

                    options.SaveToken = false;        // не сохраняем токен во внутренние куки
                    options.MapInboundClaims = false; // не ремапим типы клеймов

                    options.TokenValidationParameters = new TokenValidationParameters
                    {
                        ValidateIssuer = true,
                        ValidateAudience = true,
                        ValidateLifetime = true,
                        ValidateIssuerSigningKey = true,
                        ClockSkew = TimeSpan.Zero,

                        ValidIssuer = jwt.Issuer,
                        ValidAudience = jwt.Audience,
                        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(jwt.Key)),

                        // Явно указываем типы клеймов
                        NameClaimType = ClaimTypes.NameIdentifier,
                        RoleClaimType = ClaimTypes.Role
                    };
                });

            return services;
        }
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Infrastructure\Extensions\ServiceCollectionExtensions.cs =====
using Microsoft.Extensions.DependencyInjection;
using Microsoft.AspNetCore.Identity;
using OnlineStore.Domain.Entities;
using OnlineStore.Application.Interfaces.Repositories;
using OnlineStore.Application.Interfaces.Services;
using OnlineStore.Infrastructure.Repositories;
using OnlineStore.Infrastructure.Services;
using OnlineStore.Infrastructure.Security;

namespace OnlineStore.Infrastructure.Extensions
{
    public static class ServiceCollectionExtensions
    {
        public static IServiceCollection AddInfrastructure(this IServiceCollection services)
        {
            // Репозитории
            services.AddScoped<IUserRepository, UserRepository>();
            services.AddScoped<IRefreshTokenRepository, RefreshTokenRepository>();

            // Сервисы
            services.AddScoped<IUsersService, UsersService>();
            services.AddScoped<IAuthService, AuthService>();

            // Вспомогательные зависимости
            services.AddScoped<IPasswordHasher<User>, PasswordHasher<User>>();
            services.AddScoped<IRefreshTokenFactory, RefreshTokenFactory>();
            return services;
        }
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Infrastructure\Options\JwtOptions.cs =====
namespace OnlineStore.Infrastructure.Options
{
    /// <summary>
    /// Настройки JWT, биндятся из секции "Jwt" в appsettings*.json.
    /// </summary>
    public class JwtOptions
    {
        /// <summary>Издатель токена (Issuer).</summary>
        public string Issuer { get; set; } = default!;

        /// <summary>Аудитория токена (Audience).</summary>
        public string Audience { get; set; } = default!;

        /// <summary>Секретный ключ для подписи (минимум 32 байта).</summary>
        public string Key { get; set; } = default!;

        /// <summary>Время жизни access-токена, в минутах.</summary>
        public int AccessTokenLifetimeMinutes { get; set; } = 120;

        public int RefreshTokenLifetimeDays { get; set; } = 30;

    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Infrastructure\Persistence\AppDbContext.cs =====
using Microsoft.EntityFrameworkCore;
using OnlineStore.Domain.Entities;

namespace OnlineStore.Infrastructure.Persistence
{
    /// <summary>
    /// Главный контекст EF Core. Хранит DbSet'ы и подтягивает все конфигурации из сборки Infrastructure.
    /// </summary>
    public class AppDbContext : DbContext
    {
        // Конструктор, принимающий параметры конфигурации
        public AppDbContext(DbContextOptions<AppDbContext> options) : base(options) { }

        // Этот метод вызывается при создании модели базы данных
        // Здесь мы можем настроить связи, ограничения и другие аспекты модели
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            // Подтягиваем ВСЕ конфигурации IEntityTypeConfiguration<> из сборки Infrastructure
            modelBuilder.ApplyConfigurationsFromAssembly(typeof(AppDbContext).Assembly);

            // Глобальный фильтр мягкого удаления для пользователей
            modelBuilder.Entity<User>().HasQueryFilter(u => !u.IsDeleted);
        }

        // DbSet'ы для каждой сущности
        public DbSet<User> Users => Set<User>();
        public DbSet<RefreshToken> RefreshTokens => Set<RefreshToken>();
        public DbSet<Project> Projects => Set<Project>();
        public DbSet<Model3D> Models => Set<Model3D>();
        public DbSet<ProjectImage> ProjectImages => Set<ProjectImage>();
        public DbSet<ModelImage> ModelImages => Set<ModelImage>();
        public DbSet<Cart> Carts => Set<Cart>();
        public DbSet<CartItem> CartItems => Set<CartItem>();
        public DbSet<Order> Orders => Set<Order>();
        public DbSet<OrderItem> OrderItems => Set<OrderItem>();
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Infrastructure\Persistence\Configurations\CartConfiguration.cs =====
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using OnlineStore.Domain.Entities;

namespace OnlineStore.Infrastructure.Persistence.Configurations
{
    public class CartConfiguration : IEntityTypeConfiguration<Cart>
    {
        public void Configure(EntityTypeBuilder<Cart> builder)
        {
            builder.ToTable("carts", tb =>
            {
                tb.HasComment("Корзины пользователей.");
            });

            builder.HasQueryFilter(c => c.User != null && !c.User.IsDeleted);
            builder.HasKey(c => c.Id);
            // 1:1 связь с User настроена в UserConfiguration (FK: Cart.UserId)
        }
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Infrastructure\Persistence\Configurations\CartItemConfiguration.cs =====
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using OnlineStore.Domain.Entities;

namespace OnlineStore.Infrastructure.Persistence.Configurations
{
       public class CartItemConfiguration : IEntityTypeConfiguration<CartItem>
       {
              public void Configure(EntityTypeBuilder<CartItem> builder)
              {
                     builder.ToTable("cart_items", tb =>
                     {
                            tb.HasCheckConstraint(
                       "CK_CartItem_ExactlyOneRef",
                       "(CASE " +
                       "WHEN model3d_id IS NOT NULL THEN project_id IS NULL " +
                       "WHEN project_id IS NOT NULL THEN model3d_id IS NULL " +
                       "ELSE FALSE END)"
                   );

                            tb.HasComment("Позиции в корзинах (модель или проект).");
                     });

                     builder.HasKey(ci => ci.Id);

                     builder.Property(ci => ci.AddedAt)
                            .HasColumnName("added_at")
                            .HasDefaultValueSql("CURRENT_TIMESTAMP");

                     builder.HasOne(ci => ci.Cart)
                            .WithMany(c => c.CartItems) // ⚠️ корректное имя коллекции
                            .HasForeignKey(ci => ci.CartId)
                            .OnDelete(DeleteBehavior.Cascade);

                     builder.HasOne(ci => ci.Model3D)
                            .WithMany(m => m.CartItems) // коллекция есть в Model3D
                            .HasForeignKey(ci => ci.Model3DId)
                            .OnDelete(DeleteBehavior.Cascade);

                     builder.HasOne(ci => ci.Project)
                            .WithMany(p => p.CartItems) // коллекция есть в Project
                            .HasForeignKey(ci => ci.ProjectId)
                            .OnDelete(DeleteBehavior.Cascade);

                     builder.HasIndex(ci => new { ci.CartId, ci.Model3DId })
                            .IsUnique()
                            .HasFilter("model3d_id IS NOT NULL");

                     builder.HasIndex(ci => new { ci.CartId, ci.ProjectId })
                            .IsUnique()
                            .HasFilter("project_id IS NOT NULL");

                     builder.HasIndex(ci => new { ci.CartId, ci.AddedAt });

                     builder.HasQueryFilter(ci => ci.Cart != null
                           && ci.Cart.User != null
                           && !ci.Cart.User.IsDeleted);
              }
       }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Infrastructure\Persistence\Configurations\Model3DConfiguration.cs =====
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using OnlineStore.Domain.Entities;

namespace OnlineStore.Infrastructure.Persistence.Configurations
{
    public class Model3DConfiguration : IEntityTypeConfiguration<Model3D>
    {
        public void Configure(EntityTypeBuilder<Model3D> builder)
        {
            builder.ToTable("models", tb =>
            {
                tb.HasCheckConstraint("CK_Models_Price_NonNegative", "price >= 0");
                tb.HasComment("3D-модели и их метаданные.");
            });

            builder.HasKey(m => m.Id);

            builder.Property(m => m.Name).HasMaxLength(200).IsRequired();
            builder.Property(m => m.Description).HasMaxLength(2000);

            builder.Property(m => m.Price)
                   .HasColumnName("price")
                   .HasColumnType("numeric(18,2)")
                   .IsRequired();

            builder.Property(m => m.CompanyUrl)
                   .HasColumnName("company_url")
                   .HasMaxLength(500);

            builder.Property(m => m.CreatedAt)
                   .HasColumnName("created_at")
                   .IsRequired();

            builder.HasOne(m => m.Project)
                   .WithMany(p => p.Models)
                   .HasForeignKey(m => m.ProjectId)
                   .OnDelete(DeleteBehavior.Cascade);

            builder.HasMany(m => m.Images)
                   .WithOne(i => i.Model3D)
                   .HasForeignKey(i => i.Model3DId)
                   .OnDelete(DeleteBehavior.Cascade);

            // Коллекции m.OrderItems / m.CartItems существуют в сущности — связи зададим с зависимых
            builder.HasIndex(m => m.CreatedAt);
        }
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Infrastructure\Persistence\Configurations\ModelImageConfiguration.cs =====
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using OnlineStore.Domain.Entities;

namespace OnlineStore.Infrastructure.Configurations
{
       public class ModelImageConfiguration : IEntityTypeConfiguration<ModelImage>
       {
              public void Configure(EntityTypeBuilder<ModelImage> builder)
              {
                     builder.ToTable("model_images", tb =>
                     {
                            tb.HasCheckConstraint("CK_ModelImages_Order_NonNegative", "\"order\" >= 0");
                            tb.HasComment("Изображения, привязанные к 3D-моделям.");
                     });

                     builder.HasKey(mi => mi.Id);

                     builder.Property(mi => mi.ImageUrl)
                            .HasColumnName("image_url")
                            .HasMaxLength(500)
                            .IsRequired();

                     builder.Property(mi => mi.Description)
                            .HasMaxLength(1000);

                     builder.Property(mi => mi.IsPreview)
                            .HasColumnName("is_preview")
                            .IsRequired();

                     builder.Property(mi => mi.Order)
                            .HasColumnName("order")
                            .IsRequired();

                     builder.HasOne(mi => mi.Model3D)
                            .WithMany(m => m.Images)
                            .HasForeignKey(mi => mi.Model3DId)
                            .OnDelete(DeleteBehavior.Cascade);

                     builder.HasIndex(mi => new { mi.Model3DId, mi.Order });
                     builder.HasIndex(mi => mi.Model3DId)
                            .IsUnique()
                            .HasFilter("is_preview = TRUE");
              }
       }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Infrastructure\Persistence\Configurations\OrderConfiguration.cs =====
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using OnlineStore.Domain.Entities;

namespace OnlineStore.Infrastructure.Persistence.Configurations
{
       public class OrderConfiguration : IEntityTypeConfiguration<Order>
       {
              public void Configure(EntityTypeBuilder<Order> builder)
              {
                     builder.ToTable("orders", tb =>
                     {
                            tb.HasComment("Заказы пользователей.");
                     });

                     builder.HasKey(o => o.Id);

                     builder.Property(o => o.CreatedAt)
                            .HasColumnName("created_at")
                            .HasDefaultValueSql("CURRENT_TIMESTAMP");

                     builder.Property(o => o.TotalAmount)
                            .HasColumnName("total_amount")
                            .HasPrecision(18, 2);

                     builder.HasOne(o => o.User)
                            .WithMany(u => u.Orders)
                            .HasForeignKey(o => o.UserId)
                            .OnDelete(DeleteBehavior.Restrict);
                            
                     builder.HasQueryFilter(o => o.User != null && !o.User.IsDeleted);

                     // Коллекция OrderItems уже объявлена в Order — связи зададим в конфиге OrderItem
                     builder.HasIndex(o => o.UserId);
                     builder.HasIndex(o => o.CreatedAt);
                     builder.HasIndex(o => new { o.UserId, o.CreatedAt });
              }
       }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Infrastructure\Persistence\Configurations\OrderItemConfiguration.cs =====
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using OnlineStore.Domain.Entities;

namespace OnlineStore.Infrastructure.Persistence.Configurations
{
       public class OrderItemConfiguration : IEntityTypeConfiguration<OrderItem>
       {
              public void Configure(EntityTypeBuilder<OrderItem> builder)
              {
                     builder.ToTable("order_items", tb =>
                     {
                            tb.HasCheckConstraint(
                       "CK_OrderItem_ExactlyOneRef",
                       "(CASE " +
                       "WHEN model3d_id IS NOT NULL THEN project_id IS NULL " +
                       "WHEN project_id IS NOT NULL THEN model3d_id IS NULL " +
                       "ELSE FALSE END)"
                   );

                            tb.HasCheckConstraint("CK_OrderItem_PriceAtPurchase_NonNegative", "price_at_purchase >= 0");
                            tb.HasComment("Позиции заказа: либо модель, либо проект.");
                     });

                     builder.HasKey(oi => oi.Id);

                     builder.Property(oi => oi.PriceAtPurchase)
                            .HasColumnName("price_at_purchase")
                            .HasPrecision(18, 2)
                            .IsRequired();

                     builder.HasOne(oi => oi.Order)
                            .WithMany(o => o.OrderItems) // ⚠️ корректное имя коллекции
                            .HasForeignKey(oi => oi.OrderId)
                            .OnDelete(DeleteBehavior.Cascade);

                     builder.HasOne(oi => oi.Model3D)
                            .WithMany(m => m.OrderItems)  // коллекция есть в Model3D
                            .HasForeignKey(oi => oi.Model3DId)
                            .OnDelete(DeleteBehavior.Restrict);

                     builder.HasOne(oi => oi.Project)
                            .WithMany(p => p.OrderItems)  // коллекция есть в Project
                            .HasForeignKey(oi => oi.ProjectId)
                            .OnDelete(DeleteBehavior.Restrict);

                     builder.HasIndex(oi => new { oi.OrderId, oi.Model3DId })
                            .IsUnique()
                            .HasFilter("model3d_id IS NOT NULL");

                     builder.HasIndex(oi => new { oi.OrderId, oi.ProjectId })
                            .IsUnique()
                            .HasFilter("project_id IS NOT NULL");

                     builder.HasIndex(oi => oi.OrderId);
                     builder.HasIndex(oi => oi.Model3DId).HasFilter("model3d_id IS NOT NULL");
                     builder.HasIndex(oi => oi.ProjectId).HasFilter("project_id IS NOT NULL");

                     builder.HasQueryFilter(oi => oi.Order != null
                          && oi.Order.User != null
                          && !oi.Order.User.IsDeleted);
              }
       }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Infrastructure\Persistence\Configurations\ProjectConfiguration.cs =====
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using OnlineStore.Domain.Entities;

namespace OnlineStore.Infrastructure.Persistence.Configurations
{
    public class ProjectConfiguration : IEntityTypeConfiguration<Project>
    {
        public void Configure(EntityTypeBuilder<Project> builder)
        {
            builder.ToTable("projects", tb =>
            {
                tb.HasCheckConstraint("CK_Projects_Price_NonNegative", "price >= 0");
                tb.HasComment("Проекты (наборы моделей) и их метаданные.");
            });

            builder.HasKey(p => p.Id);

            builder.Property(p => p.Name).HasMaxLength(200).IsRequired();
            builder.Property(p => p.Description).HasMaxLength(2000);

            builder.Property(p => p.Price)
                   .HasColumnName("price")
                   .HasColumnType("numeric(18,2)")
                   .IsRequired();

            builder.Property(p => p.CompanyUrl)
                   .HasColumnName("company_url")
                   .HasMaxLength(500);

            builder.Property(p => p.CreatedAt)
                   .HasColumnName("created_at")
                   .IsRequired();

            builder.HasMany(p => p.Models)
                   .WithOne(m => m.Project)
                   .HasForeignKey(m => m.ProjectId)
                   .OnDelete(DeleteBehavior.Cascade);

            builder.HasMany(p => p.Images)
                   .WithOne(i => i.Project)
                   .HasForeignKey(i => i.ProjectId)
                   .OnDelete(DeleteBehavior.Cascade);

            // Навигации-коллекции в Project: OrderItems, CartItems — добавлять связи не требуется,
            // они настроены со стороны зависимых сущностей
            builder.HasIndex(p => p.CreatedAt);
        }
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Infrastructure\Persistence\Configurations\ProjectImageConfiguration.cs =====
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using OnlineStore.Domain.Entities;

namespace OnlineStore.Infrastructure.Persistence.Configurations
{
       public class ProjectImageConfiguration : IEntityTypeConfiguration<ProjectImage>
       {
              public void Configure(EntityTypeBuilder<ProjectImage> builder)
              {
                     builder.ToTable("project_images", tb =>
                     {
                            tb.HasCheckConstraint("CK_ProjectImages_Order_NonNegative", "\"order\" >= 0");
                            tb.HasComment("Изображения, привязанные к проектам.");
                     });

                     builder.HasKey(pi => pi.Id);

                     builder.Property(pi => pi.ImageUrl)
                            .HasColumnName("image_url")
                            .HasMaxLength(500)
                            .IsRequired();

                     builder.Property(pi => pi.Description)
                            .HasMaxLength(1000);

                     builder.Property(pi => pi.IsPreview)
                            .HasColumnName("is_preview")
                            .IsRequired();

                     builder.Property(pi => pi.Order)
                            .HasColumnName("order")
                            .IsRequired();

                     builder.HasOne(pi => pi.Project)
                            .WithMany(p => p.Images)
                            .HasForeignKey(pi => pi.ProjectId)
                            .OnDelete(DeleteBehavior.Cascade);

                     builder.HasIndex(pi => new { pi.ProjectId, pi.Order });
                     builder.HasIndex(pi => pi.ProjectId)
                            .IsUnique()
                            .HasFilter("is_preview = TRUE");
              }
       }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Infrastructure\Persistence\Configurations\RefreshTokenConfiguration.cs =====
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using OnlineStore.Domain.Entities;

namespace OnlineStore.Infrastructure.Persistence.Configurations
{
    public class RefreshTokenConfiguration : IEntityTypeConfiguration<RefreshToken>
    {
        public void Configure(EntityTypeBuilder<RefreshToken> builder)
        {
            builder.ToTable("refresh_tokens", tb =>
            {
                tb.HasComment("Refresh-токены пользователей (храним хеш).");
            });

            builder.HasKey(x => x.Id);

            builder.Property(x => x.TokenHash).IsRequired().HasMaxLength(256);
            builder.Property(x => x.CreatedAt).IsRequired();
            builder.Property(x => x.ExpiresAt).IsRequired();

            builder.Property(x => x.CreatedByIp).HasColumnName("created_by_ip").HasMaxLength(64);
            builder.Property(x => x.CreatedByUa).HasColumnName("created_by_ua").HasMaxLength(512);
            builder.Property(x => x.RevokedByIp).HasColumnName("revoked_by_ip").HasMaxLength(64);

            builder.Property(x => x.ReplacedByTokenId).HasColumnName("replaced_by_token_id");

            builder.HasIndex(x => x.TokenHash).IsUnique();

            builder.HasQueryFilter(rt => rt.User != null && !rt.User.IsDeleted);
            // У пользователя нет коллекции RefreshTokens — используем WithMany() без нав. свойства
            builder.HasOne(x => x.User)
             .WithMany()
             .HasForeignKey(x => x.UserId)
             .OnDelete(DeleteBehavior.Cascade);
        }
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Infrastructure\Persistence\Configurations\UserConfiguration.cs =====
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using OnlineStore.Domain.Entities;

namespace OnlineStore.Infrastructure.Persistence.Configurations
{
    public class UserConfiguration : IEntityTypeConfiguration<User>
    {
        public void Configure(EntityTypeBuilder<User> builder)
        {
            builder.ToTable("users", tb =>
            {
                tb.HasComment("Пользователи интернет-магазина.");
            });

            builder.HasKey(u => u.Id);

            builder.Property(u => u.Email)
                .HasColumnName("email")
                .HasMaxLength(255).
                IsRequired();

            builder.Property(u => u.NormalizedEmail)
                .HasColumnName("normalized_email")
                .HasMaxLength(255)
                .IsRequired();

            builder.Property(u => u.PasswordHash)
                .HasColumnName("password_hash")
                .HasMaxLength(500)
                .IsRequired();

            builder.Property(u => u.CreatedAt)
                .HasColumnName("created_at")
                .HasDefaultValueSql("CURRENT_TIMESTAMP");

            builder.Property(u => u.IsAdmin)
                .HasColumnName("is_admin")
                    .HasDefaultValue(false);

            builder.Property(u => u.IsDeleted)
                .HasColumnName("is_deleted")
                .HasDefaultValue(false);

            builder.Property(u => u.DeletedAtUtc)
                .HasColumnName("deleted_at_utc");

            builder.Property(u => u.DeletedBy)
                .HasColumnName("deleted_by");

            // 1:1 с Cart (FK в Cart.UserId)
            builder.HasOne(u => u.Cart)
                .WithOne(c => c.User)
                .HasForeignKey<Cart>(c => c.UserId)
                .OnDelete(DeleteBehavior.Cascade);

            // 1:N с Order (коллекция Orders есть)
            // Доп. конфигурация FK задана в OrderConfiguration
            builder.HasIndex(u => u.NormalizedEmail)
                .IsUnique();
            builder.HasIndex(u => new { u.IsDeleted, u.IsAdmin });
        }
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Infrastructure\Persistence\Migrations\20250818174916_InitAll.cs =====
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace OnlineStore.Infrastructure.Migrations
{
    /// <inheritdoc />
    public partial class InitAll : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "projects",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false),
                    name = table.Column<string>(type: "character varying(200)", maxLength: 200, nullable: false),
                    description = table.Column<string>(type: "character varying(2000)", maxLength: 2000, nullable: true),
                    price = table.Column<decimal>(type: "numeric(18,2)", nullable: false),
                    company_url = table.Column<string>(type: "character varying(500)", maxLength: 500, nullable: true),
                    created_at = table.Column<DateTime>(type: "timestamp with time zone", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("pk_projects", x => x.id);
                    table.CheckConstraint("CK_Projects_Price_NonNegative", "price >= 0");
                },
                comment: "Проекты (наборы моделей) и их метаданные.");

            migrationBuilder.CreateTable(
                name: "users",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false),
                    email = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: false),
                    normalized_email = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: false),
                    password_hash = table.Column<string>(type: "character varying(500)", maxLength: 500, nullable: false),
                    created_at = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "CURRENT_TIMESTAMP")
                },
                constraints: table =>
                {
                    table.PrimaryKey("pk_users", x => x.id);
                },
                comment: "Пользователи интернет-магазина.");

            migrationBuilder.CreateTable(
                name: "models",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false),
                    name = table.Column<string>(type: "character varying(200)", maxLength: 200, nullable: false),
                    description = table.Column<string>(type: "character varying(2000)", maxLength: 2000, nullable: false),
                    price = table.Column<decimal>(type: "numeric(18,2)", nullable: false),
                    company_url = table.Column<string>(type: "character varying(500)", maxLength: 500, nullable: true),
                    created_at = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    project_id = table.Column<Guid>(type: "uuid", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("pk_models", x => x.id);
                    table.CheckConstraint("CK_Models_Price_NonNegative", "price >= 0");
                    table.ForeignKey(
                        name: "fk_models_projects_project_id",
                        column: x => x.project_id,
                        principalTable: "projects",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                },
                comment: "3D-модели и их метаданные.");

            migrationBuilder.CreateTable(
                name: "project_images",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false),
                    image_url = table.Column<string>(type: "character varying(500)", maxLength: 500, nullable: false),
                    description = table.Column<string>(type: "character varying(1000)", maxLength: 1000, nullable: true),
                    order = table.Column<int>(type: "integer", nullable: false),
                    is_preview = table.Column<bool>(type: "boolean", nullable: false),
                    project_id = table.Column<Guid>(type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("pk_project_images", x => x.id);
                    table.CheckConstraint("CK_ProjectImages_Order_NonNegative", "\"order\" >= 0");
                    table.ForeignKey(
                        name: "fk_project_images_projects_project_id",
                        column: x => x.project_id,
                        principalTable: "projects",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                },
                comment: "Изображения, привязанные к проектам.");

            migrationBuilder.CreateTable(
                name: "carts",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false),
                    user_id = table.Column<Guid>(type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("pk_carts", x => x.id);
                    table.ForeignKey(
                        name: "fk_carts_users_user_id",
                        column: x => x.user_id,
                        principalTable: "users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                },
                comment: "Корзины пользователей.");

            migrationBuilder.CreateTable(
                name: "orders",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false),
                    user_id = table.Column<Guid>(type: "uuid", nullable: false),
                    created_at = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "CURRENT_TIMESTAMP"),
                    total_amount = table.Column<decimal>(type: "numeric(18,2)", precision: 18, scale: 2, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("pk_orders", x => x.id);
                    table.ForeignKey(
                        name: "fk_orders_users_user_id",
                        column: x => x.user_id,
                        principalTable: "users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                },
                comment: "Заказы пользователей.");

            migrationBuilder.CreateTable(
                name: "refresh_tokens",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false),
                    user_id = table.Column<Guid>(type: "uuid", nullable: false),
                    token_hash = table.Column<string>(type: "character varying(256)", maxLength: 256, nullable: false),
                    expires_at = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    created_at = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    created_by_ip = table.Column<string>(type: "character varying(64)", maxLength: 64, nullable: true),
                    created_by_ua = table.Column<string>(type: "character varying(512)", maxLength: 512, nullable: true),
                    revoked_at = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    revoked_by_ip = table.Column<string>(type: "character varying(64)", maxLength: 64, nullable: true),
                    replaced_by_token_id = table.Column<Guid>(type: "uuid", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("pk_refresh_tokens", x => x.id);
                    table.ForeignKey(
                        name: "fk_refresh_tokens_users_user_id",
                        column: x => x.user_id,
                        principalTable: "users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                },
                comment: "Refresh-токены пользователей (храним хеш).");

            migrationBuilder.CreateTable(
                name: "model_images",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false),
                    image_url = table.Column<string>(type: "character varying(500)", maxLength: 500, nullable: false),
                    description = table.Column<string>(type: "character varying(1000)", maxLength: 1000, nullable: true),
                    order = table.Column<int>(type: "integer", nullable: false),
                    is_preview = table.Column<bool>(type: "boolean", nullable: false),
                    model3d_id = table.Column<Guid>(type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("pk_model_images", x => x.id);
                    table.CheckConstraint("CK_ModelImages_Order_NonNegative", "\"order\" >= 0");
                    table.ForeignKey(
                        name: "fk_model_images_models_model3d_id",
                        column: x => x.model3d_id,
                        principalTable: "models",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                },
                comment: "Изображения, привязанные к 3D-моделям.");

            migrationBuilder.CreateTable(
                name: "cart_items",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false),
                    cart_id = table.Column<Guid>(type: "uuid", nullable: false),
                    model3d_id = table.Column<Guid>(type: "uuid", nullable: true),
                    project_id = table.Column<Guid>(type: "uuid", nullable: true),
                    added_at = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "CURRENT_TIMESTAMP")
                },
                constraints: table =>
                {
                    table.PrimaryKey("pk_cart_items", x => x.id);
                    table.CheckConstraint("CK_CartItem_ExactlyOneRef", "(CASE WHEN model3d_id IS NOT NULL THEN project_id IS NULL WHEN project_id IS NOT NULL THEN model3d_id IS NULL ELSE FALSE END)");
                    table.ForeignKey(
                        name: "fk_cart_items_carts_cart_id",
                        column: x => x.cart_id,
                        principalTable: "carts",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "fk_cart_items_models_model3d_id",
                        column: x => x.model3d_id,
                        principalTable: "models",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "fk_cart_items_projects_project_id",
                        column: x => x.project_id,
                        principalTable: "projects",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                },
                comment: "Позиции в корзинах (модель или проект).");

            migrationBuilder.CreateTable(
                name: "order_items",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false),
                    order_id = table.Column<Guid>(type: "uuid", nullable: false),
                    model3d_id = table.Column<Guid>(type: "uuid", nullable: true),
                    project_id = table.Column<Guid>(type: "uuid", nullable: true),
                    price_at_purchase = table.Column<decimal>(type: "numeric(18,2)", precision: 18, scale: 2, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("pk_order_items", x => x.id);
                    table.CheckConstraint("CK_OrderItem_ExactlyOneRef", "(CASE WHEN model3d_id IS NOT NULL THEN project_id IS NULL WHEN project_id IS NOT NULL THEN model3d_id IS NULL ELSE FALSE END)");
                    table.CheckConstraint("CK_OrderItem_PriceAtPurchase_NonNegative", "price_at_purchase >= 0");
                    table.ForeignKey(
                        name: "fk_order_items_models_model3d_id",
                        column: x => x.model3d_id,
                        principalTable: "models",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "fk_order_items_orders_order_id",
                        column: x => x.order_id,
                        principalTable: "orders",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "fk_order_items_projects_project_id",
                        column: x => x.project_id,
                        principalTable: "projects",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                },
                comment: "Позиции заказа: либо модель, либо проект.");

            migrationBuilder.CreateIndex(
                name: "ix_cart_items_cart_id_added_at",
                table: "cart_items",
                columns: new[] { "cart_id", "added_at" });

            migrationBuilder.CreateIndex(
                name: "ix_cart_items_cart_id_model3d_id",
                table: "cart_items",
                columns: new[] { "cart_id", "model3d_id" },
                unique: true,
                filter: "model3d_id IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "ix_cart_items_cart_id_project_id",
                table: "cart_items",
                columns: new[] { "cart_id", "project_id" },
                unique: true,
                filter: "project_id IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "ix_cart_items_model3d_id",
                table: "cart_items",
                column: "model3d_id");

            migrationBuilder.CreateIndex(
                name: "ix_cart_items_project_id",
                table: "cart_items",
                column: "project_id");

            migrationBuilder.CreateIndex(
                name: "ix_carts_user_id",
                table: "carts",
                column: "user_id",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "ix_model_images_model3d_id",
                table: "model_images",
                column: "model3d_id",
                unique: true,
                filter: "is_preview = TRUE");

            migrationBuilder.CreateIndex(
                name: "ix_model_images_model3d_id_order",
                table: "model_images",
                columns: new[] { "model3d_id", "order" });

            migrationBuilder.CreateIndex(
                name: "ix_models_created_at",
                table: "models",
                column: "created_at");

            migrationBuilder.CreateIndex(
                name: "ix_models_project_id",
                table: "models",
                column: "project_id");

            migrationBuilder.CreateIndex(
                name: "ix_order_items_model3d_id",
                table: "order_items",
                column: "model3d_id",
                filter: "model3d_id IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "ix_order_items_order_id",
                table: "order_items",
                column: "order_id");

            migrationBuilder.CreateIndex(
                name: "ix_order_items_order_id_model3d_id",
                table: "order_items",
                columns: new[] { "order_id", "model3d_id" },
                unique: true,
                filter: "model3d_id IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "ix_order_items_order_id_project_id",
                table: "order_items",
                columns: new[] { "order_id", "project_id" },
                unique: true,
                filter: "project_id IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "ix_order_items_project_id",
                table: "order_items",
                column: "project_id",
                filter: "project_id IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "ix_orders_created_at",
                table: "orders",
                column: "created_at");

            migrationBuilder.CreateIndex(
                name: "ix_orders_user_id",
                table: "orders",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "ix_orders_user_id_created_at",
                table: "orders",
                columns: new[] { "user_id", "created_at" });

            migrationBuilder.CreateIndex(
                name: "ix_project_images_project_id",
                table: "project_images",
                column: "project_id",
                unique: true,
                filter: "is_preview = TRUE");

            migrationBuilder.CreateIndex(
                name: "ix_project_images_project_id_order",
                table: "project_images",
                columns: new[] { "project_id", "order" });

            migrationBuilder.CreateIndex(
                name: "ix_projects_created_at",
                table: "projects",
                column: "created_at");

            migrationBuilder.CreateIndex(
                name: "ix_refresh_tokens_token_hash",
                table: "refresh_tokens",
                column: "token_hash",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "ix_refresh_tokens_user_id",
                table: "refresh_tokens",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "ix_users_normalized_email",
                table: "users",
                column: "normalized_email",
                unique: true);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "cart_items");

            migrationBuilder.DropTable(
                name: "model_images");

            migrationBuilder.DropTable(
                name: "order_items");

            migrationBuilder.DropTable(
                name: "project_images");

            migrationBuilder.DropTable(
                name: "refresh_tokens");

            migrationBuilder.DropTable(
                name: "carts");

            migrationBuilder.DropTable(
                name: "models");

            migrationBuilder.DropTable(
                name: "orders");

            migrationBuilder.DropTable(
                name: "projects");

            migrationBuilder.DropTable(
                name: "users");
        }
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Infrastructure\Persistence\Migrations\20250818174916_InitAll.Designer.cs =====
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OnlineStore.Infrastructure.Persistence;

#nullable disable

namespace OnlineStore.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250818174916_InitAll")]
    partial class InitAll
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OnlineStore.Domain.Entities.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_carts");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_carts_user_id");

                    b.ToTable("carts", null, t =>
                        {
                            t.HasComment("Корзины пользователей.");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("AddedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("added_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uuid")
                        .HasColumnName("cart_id");

                    b.Property<Guid?>("Model3DId")
                        .HasColumnType("uuid")
                        .HasColumnName("model3d_id");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.HasKey("Id")
                        .HasName("pk_cart_items");

                    b.HasIndex("Model3DId")
                        .HasDatabaseName("ix_cart_items_model3d_id");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_cart_items_project_id");

                    b.HasIndex("CartId", "AddedAt")
                        .HasDatabaseName("ix_cart_items_cart_id_added_at");

                    b.HasIndex("CartId", "Model3DId")
                        .IsUnique()
                        .HasDatabaseName("ix_cart_items_cart_id_model3d_id")
                        .HasFilter("model3d_id IS NOT NULL");

                    b.HasIndex("CartId", "ProjectId")
                        .IsUnique()
                        .HasDatabaseName("ix_cart_items_cart_id_project_id")
                        .HasFilter("project_id IS NOT NULL");

                    b.ToTable("cart_items", null, t =>
                        {
                            t.HasComment("Позиции в корзинах (модель или проект).");

                            t.HasCheckConstraint("CK_CartItem_ExactlyOneRef", "(CASE WHEN model3d_id IS NOT NULL THEN project_id IS NULL WHEN project_id IS NOT NULL THEN model3d_id IS NULL ELSE FALSE END)");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Model3D", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CompanyUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("company_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("price");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.HasKey("Id")
                        .HasName("pk_models");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_models_created_at");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_models_project_id");

                    b.ToTable("models", null, t =>
                        {
                            t.HasComment("3D-модели и их метаданные.");

                            t.HasCheckConstraint("CK_Models_Price_NonNegative", "price >= 0");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.ModelImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsPreview")
                        .HasColumnType("boolean")
                        .HasColumnName("is_preview");

                    b.Property<Guid>("Model3DId")
                        .HasColumnType("uuid")
                        .HasColumnName("model3d_id");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.HasKey("Id")
                        .HasName("pk_model_images");

                    b.HasIndex("Model3DId")
                        .IsUnique()
                        .HasDatabaseName("ix_model_images_model3d_id")
                        .HasFilter("is_preview = TRUE");

                    b.HasIndex("Model3DId", "Order")
                        .HasDatabaseName("ix_model_images_model3d_id_order");

                    b.ToTable("model_images", null, t =>
                        {
                            t.HasComment("Изображения, привязанные к 3D-моделям.");

                            t.HasCheckConstraint("CK_ModelImages_Order_NonNegative", "\"order\" >= 0");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("total_amount");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_orders_created_at");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_orders_user_id");

                    b.HasIndex("UserId", "CreatedAt")
                        .HasDatabaseName("ix_orders_user_id_created_at");

                    b.ToTable("orders", null, t =>
                        {
                            t.HasComment("Заказы пользователей.");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("Model3DId")
                        .HasColumnType("uuid")
                        .HasColumnName("model3d_id");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<decimal>("PriceAtPurchase")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("price_at_purchase");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.HasKey("Id")
                        .HasName("pk_order_items");

                    b.HasIndex("Model3DId")
                        .HasDatabaseName("ix_order_items_model3d_id")
                        .HasFilter("model3d_id IS NOT NULL");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_order_items_order_id");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_order_items_project_id")
                        .HasFilter("project_id IS NOT NULL");

                    b.HasIndex("OrderId", "Model3DId")
                        .IsUnique()
                        .HasDatabaseName("ix_order_items_order_id_model3d_id")
                        .HasFilter("model3d_id IS NOT NULL");

                    b.HasIndex("OrderId", "ProjectId")
                        .IsUnique()
                        .HasDatabaseName("ix_order_items_order_id_project_id")
                        .HasFilter("project_id IS NOT NULL");

                    b.ToTable("order_items", null, t =>
                        {
                            t.HasComment("Позиции заказа: либо модель, либо проект.");

                            t.HasCheckConstraint("CK_OrderItem_ExactlyOneRef", "(CASE WHEN model3d_id IS NOT NULL THEN project_id IS NULL WHEN project_id IS NOT NULL THEN model3d_id IS NULL ELSE FALSE END)");

                            t.HasCheckConstraint("CK_OrderItem_PriceAtPurchase_NonNegative", "price_at_purchase >= 0");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CompanyUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("company_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("pk_projects");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_projects_created_at");

                    b.ToTable("projects", null, t =>
                        {
                            t.HasComment("Проекты (наборы моделей) и их метаданные.");

                            t.HasCheckConstraint("CK_Projects_Price_NonNegative", "price >= 0");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.ProjectImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsPreview")
                        .HasColumnType("boolean")
                        .HasColumnName("is_preview");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.HasKey("Id")
                        .HasName("pk_project_images");

                    b.HasIndex("ProjectId")
                        .IsUnique()
                        .HasDatabaseName("ix_project_images_project_id")
                        .HasFilter("is_preview = TRUE");

                    b.HasIndex("ProjectId", "Order")
                        .HasDatabaseName("ix_project_images_project_id_order");

                    b.ToTable("project_images", null, t =>
                        {
                            t.HasComment("Изображения, привязанные к проектам.");

                            t.HasCheckConstraint("CK_ProjectImages_Order_NonNegative", "\"order\" >= 0");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("created_by_ip");

                    b.Property<string>("CreatedByUa")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("created_by_ua");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<Guid?>("ReplacedByTokenId")
                        .HasColumnType("uuid")
                        .HasColumnName("replaced_by_token_id");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("revoked_at");

                    b.Property<string>("RevokedByIp")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("revoked_by_ip");

                    b.Property<string>("TokenHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("token_hash");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_refresh_tokens");

                    b.HasIndex("TokenHash")
                        .IsUnique()
                        .HasDatabaseName("ix_refresh_tokens_token_hash");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_refresh_tokens_user_id");

                    b.ToTable("refresh_tokens", null, t =>
                        {
                            t.HasComment("Refresh-токены пользователей (храним хеш).");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("password_hash");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("NormalizedEmail")
                        .IsUnique()
                        .HasDatabaseName("ix_users_normalized_email");

                    b.ToTable("users", null, t =>
                        {
                            t.HasComment("Пользователи интернет-магазина.");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Cart", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("OnlineStore.Domain.Entities.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_carts_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cart_items_carts_cart_id");

                    b.HasOne("OnlineStore.Domain.Entities.Model3D", "Model3D")
                        .WithMany("CartItems")
                        .HasForeignKey("Model3DId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_cart_items_models_model3d_id");

                    b.HasOne("OnlineStore.Domain.Entities.Project", "Project")
                        .WithMany("CartItems")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_cart_items_projects_project_id");

                    b.Navigation("Cart");

                    b.Navigation("Model3D");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Model3D", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.Project", "Project")
                        .WithMany("Models")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_models_projects_project_id");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.ModelImage", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.Model3D", "Model3D")
                        .WithMany("Images")
                        .HasForeignKey("Model3DId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_model_images_models_model3d_id");

                    b.Navigation("Model3D");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Order", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_orders_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.Model3D", "Model3D")
                        .WithMany("OrderItems")
                        .HasForeignKey("Model3DId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_order_items_models_model3d_id");

                    b.HasOne("OnlineStore.Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_items_orders_order_id");

                    b.HasOne("OnlineStore.Domain.Entities.Project", "Project")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_order_items_projects_project_id");

                    b.Navigation("Model3D");

                    b.Navigation("Order");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.ProjectImage", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.Project", "Project")
                        .WithMany("Images")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_images_projects_project_id");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_refresh_tokens_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Model3D", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Images");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Project", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Images");

                    b.Navigation("Models");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.User", b =>
                {
                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Infrastructure\Persistence\Migrations\20250818213620_AddIsAdminToUser.cs =====
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace OnlineStore.Infrastructure.Migrations
{
    /// <inheritdoc />
    public partial class AddIsAdminToUser : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn<DateTime>(
                name: "deleted_at_utc",
                table: "users",
                type: "timestamp with time zone",
                nullable: true);

            migrationBuilder.AddColumn<Guid>(
                name: "deleted_by",
                table: "users",
                type: "uuid",
                nullable: true);

            migrationBuilder.AddColumn<bool>(
                name: "is_admin",
                table: "users",
                type: "boolean",
                nullable: false,
                defaultValue: false);

            migrationBuilder.AddColumn<bool>(
                name: "is_deleted",
                table: "users",
                type: "boolean",
                nullable: false,
                defaultValue: false);

            migrationBuilder.CreateIndex(
                name: "ix_users_is_deleted_is_admin",
                table: "users",
                columns: new[] { "is_deleted", "is_admin" });
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropIndex(
                name: "ix_users_is_deleted_is_admin",
                table: "users");

            migrationBuilder.DropColumn(
                name: "deleted_at_utc",
                table: "users");

            migrationBuilder.DropColumn(
                name: "deleted_by",
                table: "users");

            migrationBuilder.DropColumn(
                name: "is_admin",
                table: "users");

            migrationBuilder.DropColumn(
                name: "is_deleted",
                table: "users");
        }
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Infrastructure\Persistence\Migrations\20250818213620_AddIsAdminToUser.Designer.cs =====
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OnlineStore.Infrastructure.Persistence;

#nullable disable

namespace OnlineStore.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250818213620_AddIsAdminToUser")]
    partial class AddIsAdminToUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OnlineStore.Domain.Entities.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_carts");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_carts_user_id");

                    b.ToTable("carts", null, t =>
                        {
                            t.HasComment("Корзины пользователей.");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("AddedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("added_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uuid")
                        .HasColumnName("cart_id");

                    b.Property<Guid?>("Model3DId")
                        .HasColumnType("uuid")
                        .HasColumnName("model3d_id");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.HasKey("Id")
                        .HasName("pk_cart_items");

                    b.HasIndex("Model3DId")
                        .HasDatabaseName("ix_cart_items_model3d_id");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_cart_items_project_id");

                    b.HasIndex("CartId", "AddedAt")
                        .HasDatabaseName("ix_cart_items_cart_id_added_at");

                    b.HasIndex("CartId", "Model3DId")
                        .IsUnique()
                        .HasDatabaseName("ix_cart_items_cart_id_model3d_id")
                        .HasFilter("model3d_id IS NOT NULL");

                    b.HasIndex("CartId", "ProjectId")
                        .IsUnique()
                        .HasDatabaseName("ix_cart_items_cart_id_project_id")
                        .HasFilter("project_id IS NOT NULL");

                    b.ToTable("cart_items", null, t =>
                        {
                            t.HasComment("Позиции в корзинах (модель или проект).");

                            t.HasCheckConstraint("CK_CartItem_ExactlyOneRef", "(CASE WHEN model3d_id IS NOT NULL THEN project_id IS NULL WHEN project_id IS NOT NULL THEN model3d_id IS NULL ELSE FALSE END)");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Model3D", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CompanyUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("company_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("price");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.HasKey("Id")
                        .HasName("pk_models");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_models_created_at");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_models_project_id");

                    b.ToTable("models", null, t =>
                        {
                            t.HasComment("3D-модели и их метаданные.");

                            t.HasCheckConstraint("CK_Models_Price_NonNegative", "price >= 0");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.ModelImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsPreview")
                        .HasColumnType("boolean")
                        .HasColumnName("is_preview");

                    b.Property<Guid>("Model3DId")
                        .HasColumnType("uuid")
                        .HasColumnName("model3d_id");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.HasKey("Id")
                        .HasName("pk_model_images");

                    b.HasIndex("Model3DId")
                        .IsUnique()
                        .HasDatabaseName("ix_model_images_model3d_id")
                        .HasFilter("is_preview = TRUE");

                    b.HasIndex("Model3DId", "Order")
                        .HasDatabaseName("ix_model_images_model3d_id_order");

                    b.ToTable("model_images", null, t =>
                        {
                            t.HasComment("Изображения, привязанные к 3D-моделям.");

                            t.HasCheckConstraint("CK_ModelImages_Order_NonNegative", "\"order\" >= 0");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("total_amount");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_orders_created_at");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_orders_user_id");

                    b.HasIndex("UserId", "CreatedAt")
                        .HasDatabaseName("ix_orders_user_id_created_at");

                    b.ToTable("orders", null, t =>
                        {
                            t.HasComment("Заказы пользователей.");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("Model3DId")
                        .HasColumnType("uuid")
                        .HasColumnName("model3d_id");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<decimal>("PriceAtPurchase")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("price_at_purchase");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.HasKey("Id")
                        .HasName("pk_order_items");

                    b.HasIndex("Model3DId")
                        .HasDatabaseName("ix_order_items_model3d_id")
                        .HasFilter("model3d_id IS NOT NULL");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_order_items_order_id");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_order_items_project_id")
                        .HasFilter("project_id IS NOT NULL");

                    b.HasIndex("OrderId", "Model3DId")
                        .IsUnique()
                        .HasDatabaseName("ix_order_items_order_id_model3d_id")
                        .HasFilter("model3d_id IS NOT NULL");

                    b.HasIndex("OrderId", "ProjectId")
                        .IsUnique()
                        .HasDatabaseName("ix_order_items_order_id_project_id")
                        .HasFilter("project_id IS NOT NULL");

                    b.ToTable("order_items", null, t =>
                        {
                            t.HasComment("Позиции заказа: либо модель, либо проект.");

                            t.HasCheckConstraint("CK_OrderItem_ExactlyOneRef", "(CASE WHEN model3d_id IS NOT NULL THEN project_id IS NULL WHEN project_id IS NOT NULL THEN model3d_id IS NULL ELSE FALSE END)");

                            t.HasCheckConstraint("CK_OrderItem_PriceAtPurchase_NonNegative", "price_at_purchase >= 0");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CompanyUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("company_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("pk_projects");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_projects_created_at");

                    b.ToTable("projects", null, t =>
                        {
                            t.HasComment("Проекты (наборы моделей) и их метаданные.");

                            t.HasCheckConstraint("CK_Projects_Price_NonNegative", "price >= 0");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.ProjectImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsPreview")
                        .HasColumnType("boolean")
                        .HasColumnName("is_preview");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.HasKey("Id")
                        .HasName("pk_project_images");

                    b.HasIndex("ProjectId")
                        .IsUnique()
                        .HasDatabaseName("ix_project_images_project_id")
                        .HasFilter("is_preview = TRUE");

                    b.HasIndex("ProjectId", "Order")
                        .HasDatabaseName("ix_project_images_project_id_order");

                    b.ToTable("project_images", null, t =>
                        {
                            t.HasComment("Изображения, привязанные к проектам.");

                            t.HasCheckConstraint("CK_ProjectImages_Order_NonNegative", "\"order\" >= 0");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("created_by_ip");

                    b.Property<string>("CreatedByUa")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("created_by_ua");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<Guid?>("ReplacedByTokenId")
                        .HasColumnType("uuid")
                        .HasColumnName("replaced_by_token_id");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("revoked_at");

                    b.Property<string>("RevokedByIp")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("revoked_by_ip");

                    b.Property<string>("TokenHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("token_hash");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_refresh_tokens");

                    b.HasIndex("TokenHash")
                        .IsUnique()
                        .HasDatabaseName("ix_refresh_tokens_token_hash");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_refresh_tokens_user_id");

                    b.ToTable("refresh_tokens", null, t =>
                        {
                            t.HasComment("Refresh-токены пользователей (храним хеш).");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<bool>("IsAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_admin");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("password_hash");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("NormalizedEmail")
                        .IsUnique()
                        .HasDatabaseName("ix_users_normalized_email");

                    b.HasIndex("IsDeleted", "IsAdmin")
                        .HasDatabaseName("ix_users_is_deleted_is_admin");

                    b.ToTable("users", null, t =>
                        {
                            t.HasComment("Пользователи интернет-магазина.");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Cart", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("OnlineStore.Domain.Entities.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_carts_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cart_items_carts_cart_id");

                    b.HasOne("OnlineStore.Domain.Entities.Model3D", "Model3D")
                        .WithMany("CartItems")
                        .HasForeignKey("Model3DId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_cart_items_models_model3d_id");

                    b.HasOne("OnlineStore.Domain.Entities.Project", "Project")
                        .WithMany("CartItems")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_cart_items_projects_project_id");

                    b.Navigation("Cart");

                    b.Navigation("Model3D");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Model3D", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.Project", "Project")
                        .WithMany("Models")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_models_projects_project_id");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.ModelImage", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.Model3D", "Model3D")
                        .WithMany("Images")
                        .HasForeignKey("Model3DId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_model_images_models_model3d_id");

                    b.Navigation("Model3D");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Order", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_orders_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.Model3D", "Model3D")
                        .WithMany("OrderItems")
                        .HasForeignKey("Model3DId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_order_items_models_model3d_id");

                    b.HasOne("OnlineStore.Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_items_orders_order_id");

                    b.HasOne("OnlineStore.Domain.Entities.Project", "Project")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_order_items_projects_project_id");

                    b.Navigation("Model3D");

                    b.Navigation("Order");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.ProjectImage", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.Project", "Project")
                        .WithMany("Images")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_images_projects_project_id");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_refresh_tokens_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Model3D", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Images");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Project", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Images");

                    b.Navigation("Models");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.User", b =>
                {
                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Infrastructure\Persistence\Migrations\20250818220722_AddIsAdminToUser-v2.cs =====
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace OnlineStore.Infrastructure.Migrations
{
    /// <inheritdoc />
    public partial class AddIsAdminToUserv2 : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {

        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {

        }
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Infrastructure\Persistence\Migrations\20250818220722_AddIsAdminToUser-v2.Designer.cs =====
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OnlineStore.Infrastructure.Persistence;

#nullable disable

namespace OnlineStore.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250818220722_AddIsAdminToUser-v2")]
    partial class AddIsAdminToUserv2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OnlineStore.Domain.Entities.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_carts");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_carts_user_id");

                    b.ToTable("carts", null, t =>
                        {
                            t.HasComment("Корзины пользователей.");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("AddedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("added_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uuid")
                        .HasColumnName("cart_id");

                    b.Property<Guid?>("Model3DId")
                        .HasColumnType("uuid")
                        .HasColumnName("model3d_id");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.HasKey("Id")
                        .HasName("pk_cart_items");

                    b.HasIndex("Model3DId")
                        .HasDatabaseName("ix_cart_items_model3d_id");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_cart_items_project_id");

                    b.HasIndex("CartId", "AddedAt")
                        .HasDatabaseName("ix_cart_items_cart_id_added_at");

                    b.HasIndex("CartId", "Model3DId")
                        .IsUnique()
                        .HasDatabaseName("ix_cart_items_cart_id_model3d_id")
                        .HasFilter("model3d_id IS NOT NULL");

                    b.HasIndex("CartId", "ProjectId")
                        .IsUnique()
                        .HasDatabaseName("ix_cart_items_cart_id_project_id")
                        .HasFilter("project_id IS NOT NULL");

                    b.ToTable("cart_items", null, t =>
                        {
                            t.HasComment("Позиции в корзинах (модель или проект).");

                            t.HasCheckConstraint("CK_CartItem_ExactlyOneRef", "(CASE WHEN model3d_id IS NOT NULL THEN project_id IS NULL WHEN project_id IS NOT NULL THEN model3d_id IS NULL ELSE FALSE END)");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Model3D", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CompanyUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("company_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("price");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.HasKey("Id")
                        .HasName("pk_models");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_models_created_at");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_models_project_id");

                    b.ToTable("models", null, t =>
                        {
                            t.HasComment("3D-модели и их метаданные.");

                            t.HasCheckConstraint("CK_Models_Price_NonNegative", "price >= 0");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.ModelImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsPreview")
                        .HasColumnType("boolean")
                        .HasColumnName("is_preview");

                    b.Property<Guid>("Model3DId")
                        .HasColumnType("uuid")
                        .HasColumnName("model3d_id");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.HasKey("Id")
                        .HasName("pk_model_images");

                    b.HasIndex("Model3DId")
                        .IsUnique()
                        .HasDatabaseName("ix_model_images_model3d_id")
                        .HasFilter("is_preview = TRUE");

                    b.HasIndex("Model3DId", "Order")
                        .HasDatabaseName("ix_model_images_model3d_id_order");

                    b.ToTable("model_images", null, t =>
                        {
                            t.HasComment("Изображения, привязанные к 3D-моделям.");

                            t.HasCheckConstraint("CK_ModelImages_Order_NonNegative", "\"order\" >= 0");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("total_amount");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_orders_created_at");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_orders_user_id");

                    b.HasIndex("UserId", "CreatedAt")
                        .HasDatabaseName("ix_orders_user_id_created_at");

                    b.ToTable("orders", null, t =>
                        {
                            t.HasComment("Заказы пользователей.");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("Model3DId")
                        .HasColumnType("uuid")
                        .HasColumnName("model3d_id");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<decimal>("PriceAtPurchase")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("price_at_purchase");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.HasKey("Id")
                        .HasName("pk_order_items");

                    b.HasIndex("Model3DId")
                        .HasDatabaseName("ix_order_items_model3d_id")
                        .HasFilter("model3d_id IS NOT NULL");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_order_items_order_id");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_order_items_project_id")
                        .HasFilter("project_id IS NOT NULL");

                    b.HasIndex("OrderId", "Model3DId")
                        .IsUnique()
                        .HasDatabaseName("ix_order_items_order_id_model3d_id")
                        .HasFilter("model3d_id IS NOT NULL");

                    b.HasIndex("OrderId", "ProjectId")
                        .IsUnique()
                        .HasDatabaseName("ix_order_items_order_id_project_id")
                        .HasFilter("project_id IS NOT NULL");

                    b.ToTable("order_items", null, t =>
                        {
                            t.HasComment("Позиции заказа: либо модель, либо проект.");

                            t.HasCheckConstraint("CK_OrderItem_ExactlyOneRef", "(CASE WHEN model3d_id IS NOT NULL THEN project_id IS NULL WHEN project_id IS NOT NULL THEN model3d_id IS NULL ELSE FALSE END)");

                            t.HasCheckConstraint("CK_OrderItem_PriceAtPurchase_NonNegative", "price_at_purchase >= 0");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CompanyUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("company_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("pk_projects");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_projects_created_at");

                    b.ToTable("projects", null, t =>
                        {
                            t.HasComment("Проекты (наборы моделей) и их метаданные.");

                            t.HasCheckConstraint("CK_Projects_Price_NonNegative", "price >= 0");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.ProjectImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsPreview")
                        .HasColumnType("boolean")
                        .HasColumnName("is_preview");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.HasKey("Id")
                        .HasName("pk_project_images");

                    b.HasIndex("ProjectId")
                        .IsUnique()
                        .HasDatabaseName("ix_project_images_project_id")
                        .HasFilter("is_preview = TRUE");

                    b.HasIndex("ProjectId", "Order")
                        .HasDatabaseName("ix_project_images_project_id_order");

                    b.ToTable("project_images", null, t =>
                        {
                            t.HasComment("Изображения, привязанные к проектам.");

                            t.HasCheckConstraint("CK_ProjectImages_Order_NonNegative", "\"order\" >= 0");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("created_by_ip");

                    b.Property<string>("CreatedByUa")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("created_by_ua");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<Guid?>("ReplacedByTokenId")
                        .HasColumnType("uuid")
                        .HasColumnName("replaced_by_token_id");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("revoked_at");

                    b.Property<string>("RevokedByIp")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("revoked_by_ip");

                    b.Property<string>("TokenHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("token_hash");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_refresh_tokens");

                    b.HasIndex("TokenHash")
                        .IsUnique()
                        .HasDatabaseName("ix_refresh_tokens_token_hash");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_refresh_tokens_user_id");

                    b.ToTable("refresh_tokens", null, t =>
                        {
                            t.HasComment("Refresh-токены пользователей (храним хеш).");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<bool>("IsAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_admin");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("password_hash");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("NormalizedEmail")
                        .IsUnique()
                        .HasDatabaseName("ix_users_normalized_email");

                    b.HasIndex("IsDeleted", "IsAdmin")
                        .HasDatabaseName("ix_users_is_deleted_is_admin");

                    b.ToTable("users", null, t =>
                        {
                            t.HasComment("Пользователи интернет-магазина.");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Cart", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("OnlineStore.Domain.Entities.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_carts_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cart_items_carts_cart_id");

                    b.HasOne("OnlineStore.Domain.Entities.Model3D", "Model3D")
                        .WithMany("CartItems")
                        .HasForeignKey("Model3DId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_cart_items_models_model3d_id");

                    b.HasOne("OnlineStore.Domain.Entities.Project", "Project")
                        .WithMany("CartItems")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_cart_items_projects_project_id");

                    b.Navigation("Cart");

                    b.Navigation("Model3D");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Model3D", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.Project", "Project")
                        .WithMany("Models")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_models_projects_project_id");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.ModelImage", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.Model3D", "Model3D")
                        .WithMany("Images")
                        .HasForeignKey("Model3DId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_model_images_models_model3d_id");

                    b.Navigation("Model3D");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Order", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_orders_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.Model3D", "Model3D")
                        .WithMany("OrderItems")
                        .HasForeignKey("Model3DId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_order_items_models_model3d_id");

                    b.HasOne("OnlineStore.Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_items_orders_order_id");

                    b.HasOne("OnlineStore.Domain.Entities.Project", "Project")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_order_items_projects_project_id");

                    b.Navigation("Model3D");

                    b.Navigation("Order");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.ProjectImage", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.Project", "Project")
                        .WithMany("Images")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_images_projects_project_id");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_refresh_tokens_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Model3D", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Images");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Project", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Images");

                    b.Navigation("Models");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.User", b =>
                {
                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Infrastructure\Persistence\Migrations\20250818221532_AddIsAdminToUser-v3.cs =====
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace OnlineStore.Infrastructure.Migrations
{
    /// <inheritdoc />
    public partial class AddIsAdminToUserv3 : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {

        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {

        }
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Infrastructure\Persistence\Migrations\20250818221532_AddIsAdminToUser-v3.Designer.cs =====
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OnlineStore.Infrastructure.Persistence;

#nullable disable

namespace OnlineStore.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250818221532_AddIsAdminToUser-v3")]
    partial class AddIsAdminToUserv3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OnlineStore.Domain.Entities.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_carts");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_carts_user_id");

                    b.ToTable("carts", null, t =>
                        {
                            t.HasComment("Корзины пользователей.");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("AddedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("added_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uuid")
                        .HasColumnName("cart_id");

                    b.Property<Guid?>("Model3DId")
                        .HasColumnType("uuid")
                        .HasColumnName("model3d_id");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.HasKey("Id")
                        .HasName("pk_cart_items");

                    b.HasIndex("Model3DId")
                        .HasDatabaseName("ix_cart_items_model3d_id");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_cart_items_project_id");

                    b.HasIndex("CartId", "AddedAt")
                        .HasDatabaseName("ix_cart_items_cart_id_added_at");

                    b.HasIndex("CartId", "Model3DId")
                        .IsUnique()
                        .HasDatabaseName("ix_cart_items_cart_id_model3d_id")
                        .HasFilter("model3d_id IS NOT NULL");

                    b.HasIndex("CartId", "ProjectId")
                        .IsUnique()
                        .HasDatabaseName("ix_cart_items_cart_id_project_id")
                        .HasFilter("project_id IS NOT NULL");

                    b.ToTable("cart_items", null, t =>
                        {
                            t.HasComment("Позиции в корзинах (модель или проект).");

                            t.HasCheckConstraint("CK_CartItem_ExactlyOneRef", "(CASE WHEN model3d_id IS NOT NULL THEN project_id IS NULL WHEN project_id IS NOT NULL THEN model3d_id IS NULL ELSE FALSE END)");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Model3D", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CompanyUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("company_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("price");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.HasKey("Id")
                        .HasName("pk_models");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_models_created_at");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_models_project_id");

                    b.ToTable("models", null, t =>
                        {
                            t.HasComment("3D-модели и их метаданные.");

                            t.HasCheckConstraint("CK_Models_Price_NonNegative", "price >= 0");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.ModelImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsPreview")
                        .HasColumnType("boolean")
                        .HasColumnName("is_preview");

                    b.Property<Guid>("Model3DId")
                        .HasColumnType("uuid")
                        .HasColumnName("model3d_id");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.HasKey("Id")
                        .HasName("pk_model_images");

                    b.HasIndex("Model3DId")
                        .IsUnique()
                        .HasDatabaseName("ix_model_images_model3d_id")
                        .HasFilter("is_preview = TRUE");

                    b.HasIndex("Model3DId", "Order")
                        .HasDatabaseName("ix_model_images_model3d_id_order");

                    b.ToTable("model_images", null, t =>
                        {
                            t.HasComment("Изображения, привязанные к 3D-моделям.");

                            t.HasCheckConstraint("CK_ModelImages_Order_NonNegative", "\"order\" >= 0");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("total_amount");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_orders_created_at");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_orders_user_id");

                    b.HasIndex("UserId", "CreatedAt")
                        .HasDatabaseName("ix_orders_user_id_created_at");

                    b.ToTable("orders", null, t =>
                        {
                            t.HasComment("Заказы пользователей.");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("Model3DId")
                        .HasColumnType("uuid")
                        .HasColumnName("model3d_id");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<decimal>("PriceAtPurchase")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("price_at_purchase");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.HasKey("Id")
                        .HasName("pk_order_items");

                    b.HasIndex("Model3DId")
                        .HasDatabaseName("ix_order_items_model3d_id")
                        .HasFilter("model3d_id IS NOT NULL");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_order_items_order_id");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_order_items_project_id")
                        .HasFilter("project_id IS NOT NULL");

                    b.HasIndex("OrderId", "Model3DId")
                        .IsUnique()
                        .HasDatabaseName("ix_order_items_order_id_model3d_id")
                        .HasFilter("model3d_id IS NOT NULL");

                    b.HasIndex("OrderId", "ProjectId")
                        .IsUnique()
                        .HasDatabaseName("ix_order_items_order_id_project_id")
                        .HasFilter("project_id IS NOT NULL");

                    b.ToTable("order_items", null, t =>
                        {
                            t.HasComment("Позиции заказа: либо модель, либо проект.");

                            t.HasCheckConstraint("CK_OrderItem_ExactlyOneRef", "(CASE WHEN model3d_id IS NOT NULL THEN project_id IS NULL WHEN project_id IS NOT NULL THEN model3d_id IS NULL ELSE FALSE END)");

                            t.HasCheckConstraint("CK_OrderItem_PriceAtPurchase_NonNegative", "price_at_purchase >= 0");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CompanyUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("company_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("pk_projects");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_projects_created_at");

                    b.ToTable("projects", null, t =>
                        {
                            t.HasComment("Проекты (наборы моделей) и их метаданные.");

                            t.HasCheckConstraint("CK_Projects_Price_NonNegative", "price >= 0");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.ProjectImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsPreview")
                        .HasColumnType("boolean")
                        .HasColumnName("is_preview");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.HasKey("Id")
                        .HasName("pk_project_images");

                    b.HasIndex("ProjectId")
                        .IsUnique()
                        .HasDatabaseName("ix_project_images_project_id")
                        .HasFilter("is_preview = TRUE");

                    b.HasIndex("ProjectId", "Order")
                        .HasDatabaseName("ix_project_images_project_id_order");

                    b.ToTable("project_images", null, t =>
                        {
                            t.HasComment("Изображения, привязанные к проектам.");

                            t.HasCheckConstraint("CK_ProjectImages_Order_NonNegative", "\"order\" >= 0");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("created_by_ip");

                    b.Property<string>("CreatedByUa")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("created_by_ua");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<Guid?>("ReplacedByTokenId")
                        .HasColumnType("uuid")
                        .HasColumnName("replaced_by_token_id");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("revoked_at");

                    b.Property<string>("RevokedByIp")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("revoked_by_ip");

                    b.Property<string>("TokenHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("token_hash");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_refresh_tokens");

                    b.HasIndex("TokenHash")
                        .IsUnique()
                        .HasDatabaseName("ix_refresh_tokens_token_hash");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_refresh_tokens_user_id");

                    b.ToTable("refresh_tokens", null, t =>
                        {
                            t.HasComment("Refresh-токены пользователей (храним хеш).");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<bool>("IsAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_admin");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("password_hash");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("NormalizedEmail")
                        .IsUnique()
                        .HasDatabaseName("ix_users_normalized_email");

                    b.HasIndex("IsDeleted", "IsAdmin")
                        .HasDatabaseName("ix_users_is_deleted_is_admin");

                    b.ToTable("users", null, t =>
                        {
                            t.HasComment("Пользователи интернет-магазина.");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Cart", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("OnlineStore.Domain.Entities.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_carts_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cart_items_carts_cart_id");

                    b.HasOne("OnlineStore.Domain.Entities.Model3D", "Model3D")
                        .WithMany("CartItems")
                        .HasForeignKey("Model3DId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_cart_items_models_model3d_id");

                    b.HasOne("OnlineStore.Domain.Entities.Project", "Project")
                        .WithMany("CartItems")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_cart_items_projects_project_id");

                    b.Navigation("Cart");

                    b.Navigation("Model3D");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Model3D", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.Project", "Project")
                        .WithMany("Models")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_models_projects_project_id");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.ModelImage", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.Model3D", "Model3D")
                        .WithMany("Images")
                        .HasForeignKey("Model3DId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_model_images_models_model3d_id");

                    b.Navigation("Model3D");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Order", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_orders_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.Model3D", "Model3D")
                        .WithMany("OrderItems")
                        .HasForeignKey("Model3DId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_order_items_models_model3d_id");

                    b.HasOne("OnlineStore.Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_items_orders_order_id");

                    b.HasOne("OnlineStore.Domain.Entities.Project", "Project")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_order_items_projects_project_id");

                    b.Navigation("Model3D");

                    b.Navigation("Order");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.ProjectImage", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.Project", "Project")
                        .WithMany("Images")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_images_projects_project_id");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_refresh_tokens_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Model3D", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Images");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Project", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Images");

                    b.Navigation("Models");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.User", b =>
                {
                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Infrastructure\Persistence\Migrations\AppDbContextModelSnapshot.cs =====
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OnlineStore.Infrastructure.Persistence;

#nullable disable

namespace OnlineStore.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OnlineStore.Domain.Entities.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_carts");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_carts_user_id");

                    b.ToTable("carts", null, t =>
                        {
                            t.HasComment("Корзины пользователей.");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("AddedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("added_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uuid")
                        .HasColumnName("cart_id");

                    b.Property<Guid?>("Model3DId")
                        .HasColumnType("uuid")
                        .HasColumnName("model3d_id");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.HasKey("Id")
                        .HasName("pk_cart_items");

                    b.HasIndex("Model3DId")
                        .HasDatabaseName("ix_cart_items_model3d_id");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_cart_items_project_id");

                    b.HasIndex("CartId", "AddedAt")
                        .HasDatabaseName("ix_cart_items_cart_id_added_at");

                    b.HasIndex("CartId", "Model3DId")
                        .IsUnique()
                        .HasDatabaseName("ix_cart_items_cart_id_model3d_id")
                        .HasFilter("model3d_id IS NOT NULL");

                    b.HasIndex("CartId", "ProjectId")
                        .IsUnique()
                        .HasDatabaseName("ix_cart_items_cart_id_project_id")
                        .HasFilter("project_id IS NOT NULL");

                    b.ToTable("cart_items", null, t =>
                        {
                            t.HasComment("Позиции в корзинах (модель или проект).");

                            t.HasCheckConstraint("CK_CartItem_ExactlyOneRef", "(CASE WHEN model3d_id IS NOT NULL THEN project_id IS NULL WHEN project_id IS NOT NULL THEN model3d_id IS NULL ELSE FALSE END)");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Model3D", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CompanyUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("company_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("price");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.HasKey("Id")
                        .HasName("pk_models");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_models_created_at");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_models_project_id");

                    b.ToTable("models", null, t =>
                        {
                            t.HasComment("3D-модели и их метаданные.");

                            t.HasCheckConstraint("CK_Models_Price_NonNegative", "price >= 0");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.ModelImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsPreview")
                        .HasColumnType("boolean")
                        .HasColumnName("is_preview");

                    b.Property<Guid>("Model3DId")
                        .HasColumnType("uuid")
                        .HasColumnName("model3d_id");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.HasKey("Id")
                        .HasName("pk_model_images");

                    b.HasIndex("Model3DId")
                        .IsUnique()
                        .HasDatabaseName("ix_model_images_model3d_id")
                        .HasFilter("is_preview = TRUE");

                    b.HasIndex("Model3DId", "Order")
                        .HasDatabaseName("ix_model_images_model3d_id_order");

                    b.ToTable("model_images", null, t =>
                        {
                            t.HasComment("Изображения, привязанные к 3D-моделям.");

                            t.HasCheckConstraint("CK_ModelImages_Order_NonNegative", "\"order\" >= 0");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("total_amount");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_orders_created_at");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_orders_user_id");

                    b.HasIndex("UserId", "CreatedAt")
                        .HasDatabaseName("ix_orders_user_id_created_at");

                    b.ToTable("orders", null, t =>
                        {
                            t.HasComment("Заказы пользователей.");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("Model3DId")
                        .HasColumnType("uuid")
                        .HasColumnName("model3d_id");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<decimal>("PriceAtPurchase")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("price_at_purchase");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.HasKey("Id")
                        .HasName("pk_order_items");

                    b.HasIndex("Model3DId")
                        .HasDatabaseName("ix_order_items_model3d_id")
                        .HasFilter("model3d_id IS NOT NULL");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_order_items_order_id");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_order_items_project_id")
                        .HasFilter("project_id IS NOT NULL");

                    b.HasIndex("OrderId", "Model3DId")
                        .IsUnique()
                        .HasDatabaseName("ix_order_items_order_id_model3d_id")
                        .HasFilter("model3d_id IS NOT NULL");

                    b.HasIndex("OrderId", "ProjectId")
                        .IsUnique()
                        .HasDatabaseName("ix_order_items_order_id_project_id")
                        .HasFilter("project_id IS NOT NULL");

                    b.ToTable("order_items", null, t =>
                        {
                            t.HasComment("Позиции заказа: либо модель, либо проект.");

                            t.HasCheckConstraint("CK_OrderItem_ExactlyOneRef", "(CASE WHEN model3d_id IS NOT NULL THEN project_id IS NULL WHEN project_id IS NOT NULL THEN model3d_id IS NULL ELSE FALSE END)");

                            t.HasCheckConstraint("CK_OrderItem_PriceAtPurchase_NonNegative", "price_at_purchase >= 0");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CompanyUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("company_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("pk_projects");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_projects_created_at");

                    b.ToTable("projects", null, t =>
                        {
                            t.HasComment("Проекты (наборы моделей) и их метаданные.");

                            t.HasCheckConstraint("CK_Projects_Price_NonNegative", "price >= 0");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.ProjectImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsPreview")
                        .HasColumnType("boolean")
                        .HasColumnName("is_preview");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.HasKey("Id")
                        .HasName("pk_project_images");

                    b.HasIndex("ProjectId")
                        .IsUnique()
                        .HasDatabaseName("ix_project_images_project_id")
                        .HasFilter("is_preview = TRUE");

                    b.HasIndex("ProjectId", "Order")
                        .HasDatabaseName("ix_project_images_project_id_order");

                    b.ToTable("project_images", null, t =>
                        {
                            t.HasComment("Изображения, привязанные к проектам.");

                            t.HasCheckConstraint("CK_ProjectImages_Order_NonNegative", "\"order\" >= 0");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("created_by_ip");

                    b.Property<string>("CreatedByUa")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("created_by_ua");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<Guid?>("ReplacedByTokenId")
                        .HasColumnType("uuid")
                        .HasColumnName("replaced_by_token_id");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("revoked_at");

                    b.Property<string>("RevokedByIp")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("revoked_by_ip");

                    b.Property<string>("TokenHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("token_hash");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_refresh_tokens");

                    b.HasIndex("TokenHash")
                        .IsUnique()
                        .HasDatabaseName("ix_refresh_tokens_token_hash");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_refresh_tokens_user_id");

                    b.ToTable("refresh_tokens", null, t =>
                        {
                            t.HasComment("Refresh-токены пользователей (храним хеш).");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<bool>("IsAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_admin");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("password_hash");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("NormalizedEmail")
                        .IsUnique()
                        .HasDatabaseName("ix_users_normalized_email");

                    b.HasIndex("IsDeleted", "IsAdmin")
                        .HasDatabaseName("ix_users_is_deleted_is_admin");

                    b.ToTable("users", null, t =>
                        {
                            t.HasComment("Пользователи интернет-магазина.");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Cart", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("OnlineStore.Domain.Entities.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_carts_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cart_items_carts_cart_id");

                    b.HasOne("OnlineStore.Domain.Entities.Model3D", "Model3D")
                        .WithMany("CartItems")
                        .HasForeignKey("Model3DId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_cart_items_models_model3d_id");

                    b.HasOne("OnlineStore.Domain.Entities.Project", "Project")
                        .WithMany("CartItems")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_cart_items_projects_project_id");

                    b.Navigation("Cart");

                    b.Navigation("Model3D");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Model3D", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.Project", "Project")
                        .WithMany("Models")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_models_projects_project_id");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.ModelImage", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.Model3D", "Model3D")
                        .WithMany("Images")
                        .HasForeignKey("Model3DId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_model_images_models_model3d_id");

                    b.Navigation("Model3D");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Order", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_orders_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.Model3D", "Model3D")
                        .WithMany("OrderItems")
                        .HasForeignKey("Model3DId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_order_items_models_model3d_id");

                    b.HasOne("OnlineStore.Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_items_orders_order_id");

                    b.HasOne("OnlineStore.Domain.Entities.Project", "Project")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_order_items_projects_project_id");

                    b.Navigation("Model3D");

                    b.Navigation("Order");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.ProjectImage", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.Project", "Project")
                        .WithMany("Images")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_images_projects_project_id");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_refresh_tokens_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Model3D", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Images");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Project", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Images");

                    b.Navigation("Models");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.User", b =>
                {
                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Infrastructure\Repositories\DbSeeder.cs =====
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using OnlineStore.Domain.Entities;
using OnlineStore.Infrastructure.Persistence;

public class AdminSeedOptions
{
    public string? Email { get; set; }
    public string? Password { get; set; }
}

public static class DbSeeder
{
    public static async Task SeedAdminAsync(
        IServiceProvider sp,
        CancellationToken ct = default)
    {
        var logger = sp.GetRequiredService<ILoggerFactory>().CreateLogger("DbSeeder");
        var db = sp.GetRequiredService<AppDbContext>();
        var hasher = sp.GetRequiredService<IPasswordHasher<User>>();
        var opts = sp.GetRequiredService<IOptions<AdminSeedOptions>>().Value;

        if (string.IsNullOrWhiteSpace(opts.Email) || string.IsNullOrWhiteSpace(opts.Password))
        {
            logger.LogInformation("AdminSeed: пропущено (нет Email/Password).");
            return;
        }

        var norm = opts.Email.Trim().ToUpperInvariant();
        var user = await db.Users.SingleOrDefaultAsync(u => u.NormalizedEmail == norm, ct);

        if (user is null)
        {
            user = new User
            {
                Id = Guid.NewGuid(),
                Email = opts.Email.Trim(),
                NormalizedEmail = norm,
                CreatedAt = DateTime.UtcNow,
                IsAdmin = true
            };
            user.PasswordHash = hasher.HashPassword(user, opts.Password);
            db.Users.Add(user);
            await db.SaveChangesAsync(ct);

            logger.LogInformation("AdminSeed: создан админ {Email}", opts.Email);
        }
        else if (!user.IsAdmin)
        {
            user.IsAdmin = true;
            await db.SaveChangesAsync(ct);
            logger.LogInformation("AdminSeed: пользователь {Email} повышен до Admin", opts.Email);
        }
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Infrastructure\Repositories\RefreshTokenRepository.cs =====
using Microsoft.EntityFrameworkCore;
using OnlineStore.Application.Interfaces.Repositories;
using OnlineStore.Domain.Entities;
using OnlineStore.Infrastructure.Persistence;

namespace OnlineStore.Infrastructure.Repositories
{
    /// <summary>
    /// Репозиторий refresh-токенов. Хранит только ХЭШ токена.
    /// </summary>
    public class RefreshTokenRepository : IRefreshTokenRepository
    {
        private readonly AppDbContext _db;

        public RefreshTokenRepository(AppDbContext db) => _db = db;

        /// <summary>
        /// Добавить новый refresh-токен (entity содержит только hash и метаданные).
        /// SaveChanges выполняется на уровне сервиса.
        /// </summary>
        public async Task AddAsync(RefreshToken entity)
        {
            await _db.RefreshTokens.AddAsync(entity);
        }

        /// <summary>
        /// Поиск по хэшу (используется при refresh/login/register).
        /// </summary>
        public async Task<RefreshToken?> GetByHashAsync(string hash)
        {
            // IgnoreQueryFilters НЕ нужен: токены удалённых пользователей нам не нужны для user-потока.
            return await _db.RefreshTokens
                .AsNoTracking()
                .FirstOrDefaultAsync(x => x.TokenHash == hash);
        }

        /// <summary>
        /// Получить токен по первичному ключу (для закрытия конкретной сессии в профиле).
        /// </summary>
        public async Task<RefreshToken?> GetByIdAsync(Guid id, CancellationToken ct = default)
        {
            return await _db.RefreshTokens.FirstOrDefaultAsync(x => x.Id == id, ct);
        }

        /// <summary>
        /// Список активных сессий пользователя (для UI): не отозваны и не истекли.
        /// </summary>
        public async Task<IReadOnlyList<RefreshToken>> GetActiveByUserAsync(Guid userId, CancellationToken ct = default)
        {
            var now = DateTime.UtcNow;
            return await _db.RefreshTokens
                .Where(x => x.UserId == userId && x.RevokedAt == null && x.ExpiresAt > now)
                .OrderByDescending(x => x.CreatedAt)
                .ToListAsync(ct);
        }

        /// <summary>
        /// Отозвать один refresh-токен (идемпотентно).
        /// </summary>
        public Task RevokeAsync(RefreshToken token, string? ip)
        {
            if (token.RevokedAt is null)
            {
                token.RevokedAt = DateTime.UtcNow;
                token.RevokedByIp = ip;
            }
            return Task.CompletedTask;
        }

        /// <summary>
        /// Отозвать ВСЕ refresh-токены пользователя. 
        /// ВАЖНО: .IgnoreQueryFilters(), если user уже IsDeleted=true.
        /// </summary>
        public async Task RevokeAllForUserAsync(Guid userId, string? ip)
        {
            var now = DateTime.UtcNow;

            await _db.RefreshTokens
                .IgnoreQueryFilters() // чтобы не потерять токены soft-deleted пользователя
                .Where(x => x.UserId == userId && x.RevokedAt == null && x.ExpiresAt > now)
                .ExecuteUpdateAsync(s => s
                    .SetProperty(t => t.RevokedAt, now)
                    .SetProperty(t => t.RevokedByIp, ip));
        }
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Infrastructure\Repositories\UserRepository.cs =====
using Microsoft.EntityFrameworkCore;
using OnlineStore.Application.Interfaces.Repositories;
using OnlineStore.Domain.Entities;
using OnlineStore.Infrastructure.Persistence;

namespace OnlineStore.Infrastructure.Repositories;

/// <summary>
/// Реализация репозитория пользователя через EF Core.
/// </summary>
public class UserRepository : IUserRepository
{
    // Контекст базы данных для работы с сущностями
    private readonly AppDbContext _context;

    // Конструктор для внедрения зависимостей
    public UserRepository(AppDbContext context)
    {
        // Инициализация контекста базы данных
        _context = context;
    }

    // Метод получения пользователя Id
    public async Task<User?> GetByIdAsync(Guid id)
    {
        // Поиск пользователя в базе данных по Id
        return await _context.Users
            .FirstOrDefaultAsync(u => u.Id == id);  // Поиск пользователя по Id
    }

    // Метод получения пользователя по нормализованному email
    public async Task<User?> GetByNormalizedEmailAsync(string normalized)
    {
        return await _context.Users
            .AsNoTracking() // Используем AsNoTracking для повышения производительности при чтении
            .FirstOrDefaultAsync(u => u.NormalizedEmail == normalized); // Поиск пользователя по нормализованному email
    }

    // Добавление нового пользователя
    public Task AddAsync(User user)
    {
        _context.Users.Add(user);
        return Task.CompletedTask;
    }

    // Обновление хеша пароля
    public async Task UpdatePasswordHashAsync(Guid userId, string newPasswordHash)
    {
        var user = await _context.Set<User>().FirstOrDefaultAsync(u => u.Id == userId);
        if (user is null) return;

        user.PasswordHash = newPasswordHash;
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Infrastructure\Security\CookieFactory.cs =====
using Microsoft.AspNetCore.Http;

namespace OnlineStore.Infrastructure.Security
{
    /// <summary>
    /// Фабрика настроек cookie для refresh-токена.
    /// </summary>
    public static class CookieFactory
    {
        // === Обёртки, которых не хватало контроллеру ===

        /// <summary>
        /// Опции для установки обычного refresh-cookie.
        /// Решение принимаем по текущему request (https?).
        /// </summary>
        public static CookieOptions Refresh(HttpRequest req) => new CookieOptions
        {
            HttpOnly = true,
            Secure = req.IsHttps,             // для https-профиля будет true
            SameSite = SameSiteMode.Lax,        // для Swagger (same-origin) этого достаточно
            Path = "/",                     // видимо на всё приложение (минимум — избежать чувствит. к регистру)
            Expires = DateTimeOffset.UtcNow.AddDays(30)
        };

        /// <summary>
        /// Опции для мгновенного удаления cookie (истёкшее).
        /// </summary>
        public static CookieOptions Expired(HttpRequest req)
        {
            var opts = Refresh(req);
            opts.Expires = DateTimeOffset.UtcNow.AddYears(-1);
            return opts;
        }

        // === Оставляем и «старые» методы — если где-то уже используются ===

        public static CookieOptions RefreshCookieOptions(bool isProd) => new CookieOptions
        {
            HttpOnly = true,
            Secure = isProd,
            // Если когда-то будешь отправлять refresh между разными origin (SPA),
            // переключишь на None, НО тогда Secure обязательно true.
            SameSite = isProd ? SameSiteMode.Lax : SameSiteMode.Lax,
            Path = "/",
            Expires = DateTimeOffset.UtcNow.AddDays(30)
        };

        public static CookieOptions RefreshCookieOptions(bool isProd, int refreshDays) => new CookieOptions
        {
            HttpOnly = true,
            Secure = isProd,
            SameSite = isProd ? SameSiteMode.Lax : SameSiteMode.Lax,
            Path = "/",
            Expires = DateTimeOffset.UtcNow.AddDays(refreshDays)
        };

        public static CookieOptions ExpiredNow(bool isProd) => new CookieOptions
        {
            HttpOnly = true,
            Secure = isProd,
            SameSite = isProd ? SameSiteMode.Lax : SameSiteMode.Lax,
            Path = "/",
            Expires = DateTimeOffset.UtcNow.AddYears(-1)
        };
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Infrastructure\Security\CookieNames.cs =====
namespace OnlineStore.Infrastructure.Security
{
    public static class CookieNames
    {
        public const string RefreshToken = "rt"; // короткое имя cookie
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Infrastructure\Security\RefreshTokenFactory.cs =====
using System.Security.Cryptography;
using System.Text;
using OnlineStore.Domain.Entities;
using OnlineStore.Infrastructure.Options;
using Microsoft.Extensions.Options;

namespace OnlineStore.Infrastructure.Security
{
    public interface IRefreshTokenFactory
    {
        (string Raw, RefreshToken Entity) Create(Guid userId, string? ip, string? ua);
        string Hash(string raw);
    }

    public class RefreshTokenFactory : IRefreshTokenFactory
    {
        private readonly JwtOptions _jwt;
        public RefreshTokenFactory(IOptions<JwtOptions> jwt) => _jwt = jwt.Value;

        public (string Raw, RefreshToken Entity) Create(Guid userId, string? ip, string? ua)
        {
            // Генерируем крипто-устойчивую строку
            var bytes = RandomNumberGenerator.GetBytes(64);
            var raw = Convert.ToBase64String(bytes); // «сырой» RT, попадёт клиенту

            var entity = new RefreshToken
            {
                Id = Guid.NewGuid(),
                UserId = userId,
                TokenHash = Hash(raw),                        // в БД храним только хеш
                CreatedAt = DateTime.UtcNow,
                ExpiresAt = DateTime.UtcNow.AddDays(_jwt.RefreshTokenLifetimeDays),
                CreatedByIp = ip,
                CreatedByUa = ua
            };

            return (raw, entity);
        }

        public string Hash(string raw)
        {
            using var sha = SHA256.Create();
            var bytes = sha.ComputeHash(Encoding.UTF8.GetBytes(raw));
            return Convert.ToBase64String(bytes);
        }
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Infrastructure\Services\AuthService.cs =====
using Microsoft.AspNetCore.Identity;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;

using OnlineStore.Application.DTOs.Auth;
using OnlineStore.Domain.Entities;
using OnlineStore.Application.Interfaces.Services;
using OnlineStore.Application.Interfaces.Repositories;
using Microsoft.Extensions.Logging;
using OnlineStore.Application.Exceptions;
using Microsoft.Extensions.Options;
using OnlineStore.Infrastructure.Options;
using OnlineStore.Infrastructure.Persistence;
using OnlineStore.Infrastructure.Security;
using OnlineStore.Infrastructure.Common;
using Microsoft.EntityFrameworkCore;

namespace OnlineStore.Infrastructure.Services
{
    /// <summary>
    /// Сервис аутентификации: регистрация/логин/JWT/refresh-поток/смена пароля.
    /// </summary>
    public class AuthService : IAuthService
    {
        private readonly IUserRepository _users;                     // Репозиторий пользователей
        private readonly IPasswordHasher<User> _passwordHasher;      // Хешер паролей (Identity)
        private readonly JwtOptions _jwt;                            // Опции JWT
        private readonly ILogger<AuthService> _logger;               // Логер
        private readonly IRefreshTokenFactory _rtFactory;            // Фабрика refresh-токенов
        private readonly IRefreshTokenRepository _rtRepo;            // Репозиторий refresh-токенов
        private readonly AppDbContext _db;                           // EF Core DbContext для транзакций/коммитов

        public AuthService(
            IUserRepository users,
            IPasswordHasher<User> passwordHasher,
            IOptions<JwtOptions> jwtOptions,
            ILogger<AuthService> logger,
            IRefreshTokenFactory rtFactory,
            IRefreshTokenRepository rtRepo,
            AppDbContext db)
        {
            _users = users;
            _passwordHasher = passwordHasher;
            _jwt = jwtOptions.Value;
            _logger = logger;
            _rtFactory = rtFactory;
            _rtRepo = rtRepo;
            _db = db;
        }

        // Единая нормализация email для поиска/уникальности
        private static string NormalizeEmail(string email)
        {
            if (string.IsNullOrWhiteSpace(email))
                throw new ArgumentException("Email не может быть пустой строкой", nameof(email));

            return email.Trim().ToUpperInvariant();
        }

        /// <summary>
        /// Регистрация нового пользователя + выпуск пары токенов (access + refresh) атомарно.
        /// </summary>
        public async Task<AuthResponse> RegisterAsync(RegisterRequest request)
        {
            if (string.IsNullOrWhiteSpace(request.Email))
                throw new ArgumentException("Email не может быть пустой строкой", nameof(request.Email));

            var email = request.Email.Trim();
            var normalized = NormalizeEmail(email);

            // Проверяем уникальность
            var existing = await _users.GetByNormalizedEmailAsync(normalized);
            if (existing is not null)
                throw new ConflictAppException("Пользователь с таким email уже зарегистрирован.");

            // Готовим сущность пользователя
            var user = new User
            {
                Id = Guid.NewGuid(),
                Email = email,
                NormalizedEmail = normalized,
                CreatedAt = DateTime.UtcNow
            };
            user.PasswordHash = _passwordHasher.HashPassword(user, request.Password);

            await using var tx = await _db.Database.BeginTransactionAsync();
            try
            {
                // Добавляем пользователя (без SaveChanges — коммитим в конце)
                await _users.AddAsync(user);

                // Генерируем access JWT
                var access = GenerateJwt(user);

                // Создаём refresh-токен (ВАЖНО: позиционные аргументы, без имён)
                // Сигнатура фабрики: скорее всего (Guid userId, string? ip, string? ua)
                var (rawRefresh, refreshEntity) = _rtFactory.Create(user.Id, null, null);

                // Сохраняем refresh-токен (без SaveChanges здесь)
                await _rtRepo.AddAsync(refreshEntity);

                // ЕДИНЫЙ коммит и завершение транзакции
                await _db.SaveChangesAsync();
                await tx.CommitAsync();

                _logger.LogInformation("Auth: user registered {UserId}", user.Id);

                return new AuthResponse
                {
                    Email = user.Email,
                    Token = access,
                    RefreshToken = rawRefresh
                };
            }
            catch (Exception ex)
            {
                await tx.RollbackAsync();
                _logger.LogError(ex, "Auth: registration failed for {Email}", SafeLog.MaskEmail(email));
                throw;
            }
        }

        /// <summary>
        /// Авторизация по email/паролю. При устаревшем хеше — перехэш пароля. Возвращает пару токенов.
        /// </summary>
        public async Task<AuthResponse> LoginAsync(LoginRequest request)
        {
            if (string.IsNullOrWhiteSpace(request.Email))
                throw new ArgumentException("Email не может быть пустой строкой", nameof(request.Email));

            var normalized = NormalizeEmail(request.Email);
            var user = await _users.GetByNormalizedEmailAsync(normalized);

            const string invalid = "Неверные учётные данные.";
            if (user is null)
            {
                _logger.LogWarning("Auth: login failed (user not found) for {Email}", SafeLog.MaskEmail(request.Email));
                throw new UnauthorizedAppException(invalid);
            }

            var result = _passwordHasher.VerifyHashedPassword(user, user.PasswordHash, request.Password);
            if (result == PasswordVerificationResult.Failed)
            {
                _logger.LogWarning("Auth: login failed (bad password) for {Email}", SafeLog.MaskEmail(request.Email));
                throw new UnauthorizedAppException(invalid);
            }

            // Если хеш устарел — обновляем его и сохраняем
            if (result == PasswordVerificationResult.SuccessRehashNeeded)
            {
                user.PasswordHash = _passwordHasher.HashPassword(user, request.Password);
                await _db.SaveChangesAsync();
            }

            // Выпускаем access
            var access = GenerateJwt(user);

            // И создаём refresh (позиционно)
            var (rawRefresh, refreshEntity) = _rtFactory.Create(user.Id, null, null);
            await _rtRepo.AddAsync(refreshEntity);

            // Коммитим один раз
            await _db.SaveChangesAsync();

            return new AuthResponse
            {
                Email = user.Email,
                Token = access,
                RefreshToken = rawRefresh
            };
        }

        /// <summary>
        /// Профиль текущего пользователя.
        /// </summary>
        public async Task<UserProfileDto> GetProfileAsync(Guid userId)
        {
            var user = await _users.GetByIdAsync(userId)
                       ?? throw new NotFoundException("Пользователь не найден.");

            return new UserProfileDto
            {
                Id = user.Id,
                Email = user.Email,
                CreatedAt = user.CreatedAt
            };
        }

        /// <summary>
        /// Смена пароля после проверки текущего пароля.
        /// </summary>
        public async Task ChangePasswordAsync(Guid userId, ChangePasswordRequest request, CancellationToken ct = default)
        {
            var user = await _users.GetByIdAsync(userId)
                       ?? throw new NotFoundException("Пользователь не найден.");

            var verify = _passwordHasher.VerifyHashedPassword(user, user.PasswordHash, request.CurrentPassword);
            if (verify == PasswordVerificationResult.Failed)
                throw new UnauthorizedAppException("Неверные учётные данные.");

            user.PasswordHash = _passwordHasher.HashPassword(user, request.NewPassword);

            await _db.SaveChangesAsync();
            _logger.LogInformation("Auth: password changed for {UserId}", userId);
        }

        /// <summary>
        /// Обновление пары токенов по действующему refresh-токену (ротация).
        /// </summary>
        public async Task<AuthResponse> RefreshAsync(RefreshRequest request, string? ip = null, string? ua = null)
        {
            if (string.IsNullOrWhiteSpace(request.RefreshToken))
                throw new UnauthorizedAppException("Неверные учётные данные.");

            // Сверяем по хешу refresh-токена
            var hash = _rtFactory.Hash(request.RefreshToken);
            var token = await _rtRepo.GetByHashAsync(hash)
                ?? throw new UnauthorizedAppException("Неверные учётные данные.");

            // Если уже отозван/просрочен — жёсткая защита: отзывать все активные у пользователя
            if (!token.IsActive)
            {
                await _rtRepo.RevokeAllForUserAsync(token.UserId, ip);
                throw new UnauthorizedAppException("Неверные учётные данные.");
            }

            // Ротация: текущий refresh → отозвать
            await _rtRepo.RevokeAsync(token, ip);

            // Достаём пользователя
            var user = await _users.GetByIdAsync(token.UserId)
                       ?? throw new NotFoundException("Пользователь не найден.");

            // Новый access
            var access = GenerateJwt(user);

            // Новый refresh (позиционные аргументы ip/ua)
            var (rawNew, newEntity) = _rtFactory.Create(user.Id, ip, ua);
            await _rtRepo.AddAsync(newEntity);

            // Связь цепочки ротации
            token.ReplacedByTokenId = newEntity.Id;

            // Коммитим изменения
            await _db.SaveChangesAsync();

            return new AuthResponse
            {
                Email = user.Email,
                Token = access,
                RefreshToken = rawNew
            };
        }

        /// <summary>
        /// Отзыв конкретного refresh-токена (logout). Идемпотентно.
        /// </summary>
        public async Task LogoutAsync(string refreshToken, string? ip = null)
        {
            if (string.IsNullOrWhiteSpace(refreshToken)) return;

            var hash = _rtFactory.Hash(refreshToken);
            var entity = await _rtRepo.GetByHashAsync(hash);
            if (entity is null) return;

            if (entity.RevokedAt is null)
            {
                await _rtRepo.RevokeAsync(entity, ip);
                await _db.SaveChangesAsync(); // фикс: надо сохранить отзыв
            }
        }

        /// <summary>
        /// Вспомогательный метод: выпускает пару токенов для пользователя (access + refresh).
        /// Не используется снаружи, но оставлен для удобства.
        /// </summary>
        private async Task<AuthResponse> IssueTokensAsync(User user, string? requestIp, string? requestUa)
        {
            // Access JWT
            var access = GenerateJwt(user);

            // Refresh (позиционно)
            var (rawRefresh, entity) = _rtFactory.Create(user.Id, requestIp, requestUa);
            await _rtRepo.AddAsync(entity);

            return new AuthResponse
            {
                Email = user.Email,
                Token = access,
                RefreshToken = rawRefresh
            };
        }

        /// <summary>
        /// Генерация access-JWT для пользователя.
        /// </summary>
        private string GenerateJwt(User user)
        {
            var claims = new List<Claim>
            {
                new Claim(JwtRegisteredClaimNames.Sub, user.Id.ToString()),
                new Claim(JwtRegisteredClaimNames.Email, user.Email),
                new Claim(ClaimTypes.NameIdentifier, user.Id.ToString())
            };

            if (user.IsAdmin)
            {
                // Ключевой момент для [Authorize(Roles="Admin")]
                claims.Add(new Claim(ClaimTypes.Role, "Admin"));
            }

            var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_jwt.Key));
            var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);
            var expires = DateTime.UtcNow.AddMinutes(_jwt.AccessTokenLifetimeMinutes);

            var token = new JwtSecurityToken(
                issuer: _jwt.Issuer,
                audience: _jwt.Audience,
                claims: claims,
                expires: expires,
                signingCredentials: creds
            );

            return new JwtSecurityTokenHandler().WriteToken(token);
        }

        public async Task<IReadOnlyList<SessionDto>> GetSessionsAsync(Guid userId)
        {
            var list = await _rtRepo.GetActiveByUserAsync(userId); // добавим в репозиторий
            return list.Select(t => new SessionDto
            {
                Id = t.Id,
                CreatedAt = t.CreatedAt,
                ExpiresAt = t.ExpiresAt,
                CreatedByIp = t.CreatedByIp,
                CreatedByUa = t.CreatedByUa,
                IsActive = t.IsActive,
                IsCurrent = false // отметим в контроллере
            }).ToList();
        }

        public async Task LogoutAllAsync(Guid userId, string? ip = null)
        {
            await _rtRepo.RevokeAllForUserAsync(userId, ip);
            await _db.SaveChangesAsync();
        }

        public async Task LogoutSessionAsync(Guid userId, Guid tokenId, string? ip = null)
        {
            var token = await _rtRepo.GetByIdAsync(tokenId)
                ?? throw new NotFoundException("Сессия не найдена.");

            if (token.UserId != userId)
                throw new UnauthorizedAppException("Доступ запрещён.");

            if (token.RevokedAt is null)
                await _rtRepo.RevokeAsync(token, ip);

            await _db.SaveChangesAsync();
        }

        /// <summary>
        /// Вернуть список активных сессий (refresh-токенов) пользователя.
        /// </summary>
        public async Task<IReadOnlyList<SessionDto>> GetSessionsAsync(Guid userId, CancellationToken ct = default)
        {
            // Проверим, что пользователь существует (чтобы 404 был корректный)
            var user = await _users.GetByIdAsync(userId);
            if (user is null)
                throw new NotFoundException("Пользователь не найден.");

            var tokens = await _rtRepo.GetActiveByUserAsync(userId, ct);

            // Проекция в DTO
            var list = tokens.Select(t => new SessionDto
            {
                Id = t.Id,
                CreatedAt = t.CreatedAt,
                ExpiresAt = t.ExpiresAt,
                CreatedByIp = t.CreatedByIp,
                CreatedByUa = t.CreatedByUa,
                IsActive = t.RevokedAt is null && t.ExpiresAt > DateTime.UtcNow,
                IsCurrent = false // на шаге 4 можно отметить "текущую" по cookie
            }).ToList();

            return list;
        }
        /// <summary>
        /// Закрыть все сессии пользователя.
        /// </summary>
        public async Task LogoutAllAsync(Guid userId, string? ip = null, CancellationToken ct = default)
        {
            // Дополнительно можно проверить владельца/права выше, в контроллере
            await _rtRepo.RevokeAllForUserAsync(userId, ip);
            await _db.SaveChangesAsync(ct);

            _logger.LogInformation("Auth: revoked ALL sessions for {UserId} (ip: {IP})", userId, ip);
        }

        /// <summary>
        /// Закрыть конкретную сессию пользователя (по Id refresh-токена).
        /// </summary>
        public async Task LogoutSessionAsync(Guid userId, Guid tokenId, string? ip = null, CancellationToken ct = default)
        {
            var token = await _rtRepo.GetByIdAsync(tokenId, ct)
                        ?? throw new NotFoundException("Сессия не найдена.");

            // Владелец должен совпадать
            if (token.UserId != userId)
                throw new UnauthorizedAppException("Доступ запрещён.");

            if (token.RevokedAt is null)
            {
                await _rtRepo.RevokeAsync(token, ip);
                await _db.SaveChangesAsync(ct);

                _logger.LogInformation("Auth: revoked session {TokenId} for {UserId} (ip: {IP})", tokenId, userId, ip);
            }
        }
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Infrastructure\Services\UsersService.cs =====
using System;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using OnlineStore.Application.Exceptions;
using OnlineStore.Application.Interfaces.Repositories;
using OnlineStore.Application.Interfaces.Services;
using OnlineStore.Infrastructure.Persistence;

namespace OnlineStore.Infrastructure.Services
{
    /// <summary>
    /// Сервис административных операций над пользователями.
    /// Сохраняем изменения единым вызовом DbContext.SaveChangesAsync().
    /// </summary>
    public sealed class UsersService : IUsersService
    {
        // Поля для работы с зависимостями
        private readonly IUserRepository _users;
        private readonly AppDbContext _db;
        private readonly ILogger<UsersService> _logger;

        //  Конструктор с внедрением зависимостей
        public UsersService(IUserRepository users, AppDbContext db, ILogger<UsersService> logger)
        {
            _users = users;
            _db = db;
            _logger = logger;
        }

        // Метод: Добавить пользователи права администратора
        public async Task MakeAdminAsync(Guid userId, CancellationToken ct = default)
        {
            var user = await _users.GetByIdAsync(userId) ?? throw new NotFoundException("Пользователь не найден.");
            if (user.IsAdmin) return;

            user.IsAdmin = true;
            await _db.SaveChangesAsync(ct);
            _logger.LogInformation("Users: made admin {UserId}", userId);
        }

        // Метод: Забрать у пользователя права администратора
        public async Task RemoveAdminAsync(Guid userId, CancellationToken ct = default)
        {
            var user = await _users.GetByIdAsync(userId) ?? throw new NotFoundException("Пользователь не найден.");
            if (!user.IsAdmin) return;

            user.IsAdmin = false;
            await _db.SaveChangesAsync(ct);
            _logger.LogInformation("Users: removed admin {UserId}", userId);
        }

        // Метод: Мягкое удаление пользователя (без физического удаления из БД)
        public async Task SoftDeleteAsync(Guid userId, CancellationToken ct = default)
        {
            var user = await _users.GetByIdAsync(userId) ?? throw new NotFoundException("Пользователь не найден.");
            if (user.IsDeleted) return;

            user.IsDeleted = true;
            await _db.SaveChangesAsync(ct);
            _logger.LogInformation("Users: soft-deleted {UserId}", userId);
        }

        // Метод: Восстановление пользователя
        public async Task RestoreAsync(Guid userId, CancellationToken ct = default)
        {
            var user = await _users.GetByIdAsync(userId) ?? throw new NotFoundException("Пользователь не найден.");
            if (!user.IsDeleted) return;

            user.IsDeleted = false;
            await _db.SaveChangesAsync(ct);
            _logger.LogInformation("Users: restored {UserId}", userId);
        }
    }
}

===== FILE: C:\Pet-Project\OnlineStore\tests\OnlineStore.Auth.Tests\AuthControllerTests.cs =====
using System;
using FluentAssertions;
using Microsoft.AspNetCore.Mvc;
using Moq;
using OnlineStore.Api.Controllers;
using OnlineStore.Api.Security;
using OnlineStore.Application.DTOs.Auth;
using OnlineStore.Application.Interfaces.Services;
using OnlineStore.Infrastructure.Security;

namespace OnlineStore.Auth.Tests;

// Тестируем поведение контроллера: refresh в HttpOnly cookie, чтение/очистка.
public class AuthControllerTests
{
    private static AuthController Build(out Mock<IAuthService> svc, bool prod = false)
    {
        svc = new Mock<IAuthService>(MockBehavior.Strict);
        var env = TestHelpers.FakeEnv(prod);
        return new AuthController(svc.Object, env);
    }

    private static string? GetSetCookie(ControllerBase ctrl)
        => ctrl.Response.Headers.TryGetValue("Set-Cookie", out var v) ? v.ToString() : null;

    [Fact]
    public async Task Register_sets_refresh_cookie_and_hides_refresh_in_body()
    {
        var ctrl = Build(out var svc);
        ctrl.ControllerContext = new ControllerContext { HttpContext = TestHelpers.HttpWithCookies() };

        svc.Setup(s => s.RegisterAsync(It.IsAny<RegisterRequest>()))
           .ReturnsAsync(new AuthResponse { Email = "e@e", Token = "access", RefreshToken = "raw-rt" });

        var result = await ctrl.Register(new RegisterRequest { Email = "e@e", Password = "x" });
        var ok = Assert.IsType<OkObjectResult>(result.Result);
        var dto = Assert.IsType<AuthResponse>(ok.Value);

        dto.RefreshToken.Should().BeNull(); // refresh удалён из тела

        var setCookie = GetSetCookie(ctrl)!;
        setCookie.Should().Contain($"{CookieNames.RefreshToken}=");
        // В некоторых средах флаги пишутся строчными: проверяем без учёта регистра
        setCookie.Should().ContainEquivalentOf("HttpOnly");
    }

    [Fact]
    public async Task Login_sets_refresh_cookie_and_returns_access()
    {
        var ctrl = Build(out var svc);
        ctrl.ControllerContext = new ControllerContext { HttpContext = TestHelpers.HttpWithCookies() };

        svc.Setup(s => s.LoginAsync(It.IsAny<LoginRequest>()))
           .ReturnsAsync(new AuthResponse { Email = "e@e", Token = "t", RefreshToken = "raw" });

        var res = await ctrl.Login(new LoginRequest { Email = "e@e", Password = "p" });
        var ok = Assert.IsType<OkObjectResult>(res.Result);
        var dto = Assert.IsType<AuthResponse>(ok.Value);

        dto.RefreshToken.Should().BeNull();
        GetSetCookie(ctrl)!.Should().Contain($"{CookieNames.RefreshToken}=");
    }

    [Fact]
    public async Task Refresh_reads_cookie_and_sets_new_cookie()
    {
        var ctrl = Build(out var svc);
        var http = TestHelpers.HttpWithCookies();
        http.Request.Headers["Cookie"] = $"{CookieNames.RefreshToken}=old";
        ctrl.ControllerContext = new ControllerContext { HttpContext = http };

        svc.Setup(s => s.RefreshAsync(
                       It.Is<RefreshRequest>(r => r.RefreshToken == "old"),
                       It.IsAny<string?>(),
                       It.IsAny<string?>()))
           .ReturnsAsync(new AuthResponse { Email = "e@e", Token = "new-access", RefreshToken = "new-raw" });

        var res = await ctrl.Refresh();
        var ok = Assert.IsType<OkObjectResult>(res.Result);
        var dto = Assert.IsType<AuthResponse>(ok.Value);

        dto.RefreshToken.Should().BeNull();
        GetSetCookie(ctrl)!.Should().Contain($"{CookieNames.RefreshToken}=new-raw");
    }

    [Fact]
    public async Task Logout_clears_cookie_when_present()
    {
        var ctrl = Build(out var svc);
        var http = TestHelpers.HttpWithCookies();
        http.Request.Headers["Cookie"] = $"{CookieNames.RefreshToken}=abc";
        ctrl.ControllerContext = new ControllerContext { HttpContext = http };

        svc.Setup(s => s.LogoutAsync("abc", It.IsAny<string?>())).Returns(Task.CompletedTask);

        var res = await ctrl.Logout();
        Assert.IsType<NoContentResult>(res);
        GetSetCookie(ctrl)!.Should().Contain($"{CookieNames.RefreshToken}=;");
    }
}

===== FILE: C:\Pet-Project\OnlineStore\tests\OnlineStore.Auth.Tests\AuthServiceTests.cs =====
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using FluentAssertions;
using Microsoft.AspNetCore.Identity;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using Moq;
using OnlineStore.Application.DTOs.Auth;
using OnlineStore.Application.Exceptions;
using OnlineStore.Application.Interfaces.Repositories;
using OnlineStore.Domain.Entities;
using OnlineStore.Infrastructure.Options;
using OnlineStore.Infrastructure.Persistence;
using OnlineStore.Infrastructure.Security;
using OnlineStore.Infrastructure.Services;

namespace OnlineStore.Auth.Tests;

/// <summary>
/// Юнит-тесты бизнес-логики аутентификации (AuthService).
/// Здесь мы всегда используем SQLite In-Memory DbContext (без EnsureCreated),
/// чтобы работали транзакции и SaveChangesAsync, но без реальной схемы БД.
/// </summary>
public class AuthServiceTests
{
    private static JwtOptions Jwt() => new JwtOptions
    {
        Issuer = "test-issuer",
        Audience = "test-audience",
        Key = new string('K', 64),              // ключ для подписи
        AccessTokenLifetimeMinutes = 60,
        RefreshTokenLifetimeDays = 30
    };

    // ПУНКТ 3: единая фабрика — ВСЕГДА SQLite InMemory (без EnsureCreated)
    private static (
        AuthService Svc,
        Mock<IUserRepository> Users,
        Mock<IRefreshTokenRepository> Tokens,
        Mock<IPasswordHasher<User>> Hasher,
        Mock<IRefreshTokenFactory> TokenFactory,
        AppDbContext Db,
        Mock<ILogger<AuthService>> Log,
        IDisposable? Disposable
    ) BuildService()
    {
        var users = new Mock<IUserRepository>(MockBehavior.Strict);
        var tokens = new Mock<IRefreshTokenRepository>(MockBehavior.Strict);
        var hasher = new Mock<IPasswordHasher<User>>(MockBehavior.Strict);
        var tokenFactory = new Mock<IRefreshTokenFactory>(MockBehavior.Strict);
        var logger = new Mock<ILogger<AuthService>>();

        // важное: создаём реляционный провайдер (SQLite In-Memory), без EnsureCreated
        var pair = TestHelpers.CreateSqliteDb(ensureCreated: false);
        var db = pair.Db;
        IDisposable? disp = pair.Conn;

        var svc = new AuthService(
            users.Object,
            hasher.Object,
            Options.Create(Jwt()),
            logger.Object,
            tokenFactory.Object,
            tokens.Object,
            db
        );

        return (svc, users, tokens, hasher, tokenFactory, db, logger, disp);
    }

    [Fact]
    public async Task Register_should_throw_Conflict_if_email_exists()
    {
        var (svc, users, _, _, _, db, _, disp) = BuildService();
        try
        {
            users.Setup(r => r.GetByNormalizedEmailAsync(It.IsAny<string>()))
                 .ReturnsAsync(new User()); // уже есть

            var req = new RegisterRequest { Email = "user@example.com", Password = "Strong9!" };

            await FluentActions.Invoking(() => svc.RegisterAsync(req))
                .Should().ThrowAsync<ConflictAppException>(); // 409
        }
        finally { disp?.Dispose(); db.Dispose(); }
    }

    [Fact]
    public async Task Register_should_create_user_and_return_access_and_refresh()
    {
        var (svc, users, tokens, hasher, factory, db, _, disp) = BuildService();
        try
        {
            users.Setup(r => r.GetByNormalizedEmailAsync(It.IsAny<string>()))
                 .ReturnsAsync((User?)null);          // нет коллизии
            users.Setup(r => r.AddAsync(It.IsAny<User>()))
                 .Returns(Task.CompletedTask);

            hasher.Setup(h => h.HashPassword(It.IsAny<User>(), "Strong9!"))
                  .Returns("HASH");

            var rawRefresh = "raw-rt";
            var entity = new RefreshToken
            {
                Id = Guid.NewGuid(),
                UserId = Guid.NewGuid(),
                TokenHash = "HASHED",
                CreatedAt = DateTime.UtcNow,
                ExpiresAt = DateTime.UtcNow.AddDays(7)
            };

            factory.Setup(f => f.Create(It.IsAny<Guid>(), null, null))
                   .Returns((rawRefresh, entity));

            tokens.Setup(t => t.AddAsync(entity))
                  .Returns(Task.CompletedTask);

            var res = await svc.RegisterAsync(new RegisterRequest { Email = "user@example.com", Password = "Strong9!" });

            res.Email.Should().Be("user@example.com");
            res.Token.Should().NotBeNullOrWhiteSpace();
            res.RefreshToken.Should().Be(rawRefresh);

            // Разберём JWT и проверим наличие claim email
            var jwt = new JwtSecurityTokenHandler().ReadJwtToken(res.Token);
            jwt.Claims.Select(c => c.Type).Should().Contain(JwtRegisteredClaimNames.Email);
        }
        finally { disp?.Dispose(); db.Dispose(); }
    }

    [Fact]
    public async Task Login_should_throw_Unauthorized_on_missing_user_or_bad_password()
    {
        var (svc, users, _, hasher, _, db, _, disp) = BuildService();
        try
        {
            users.Setup(r => r.GetByNormalizedEmailAsync(It.IsAny<string>()))
                 .ReturnsAsync((User?)null);

            await FluentActions.Invoking(() => svc.LoginAsync(new LoginRequest { Email = "no@no", Password = "x" }))
                .Should().ThrowAsync<UnauthorizedAppException>();

            var u = new User { Id = Guid.NewGuid(), Email = "a@b", PasswordHash = "PH" };
            users.Reset();
            users.Setup(r => r.GetByNormalizedEmailAsync(It.IsAny<string>())).ReturnsAsync(u);
            hasher.Setup(h => h.VerifyHashedPassword(u, "PH", "x")).Returns(PasswordVerificationResult.Failed);

            await FluentActions.Invoking(() => svc.LoginAsync(new LoginRequest { Email = "a@b", Password = "x" }))
                .Should().ThrowAsync<UnauthorizedAppException>();
        }
        finally { disp?.Dispose(); db.Dispose(); }
    }

    [Fact]
    public async Task Login_should_return_tokens_and_rehash_when_needed()
    {
        var (svc, users, tokens, hasher, factory, db, _, disp) = BuildService();
        try
        {
            var u = new User { Id = Guid.NewGuid(), Email = "a@b", PasswordHash = "OLD", IsAdmin = true };
            users.Setup(r => r.GetByNormalizedEmailAsync(It.IsAny<string>())).ReturnsAsync(u);

            hasher.Setup(h => h.VerifyHashedPassword(u, "OLD", "pass"))
                  .Returns(PasswordVerificationResult.SuccessRehashNeeded);
            hasher.Setup(h => h.HashPassword(u, "pass")).Returns("NEW");

            var rawRt = "rt-raw";
            var ent = new RefreshToken
            {
                Id = Guid.NewGuid(),
                UserId = u.Id,
                TokenHash = "H",
                CreatedAt = DateTime.UtcNow,
                ExpiresAt = DateTime.UtcNow.AddDays(1)
            };
            factory.Setup(f => f.Create(u.Id, null, null)).Returns((rawRt, ent));
            tokens.Setup(t => t.AddAsync(ent)).Returns(Task.CompletedTask);

            var res = await svc.LoginAsync(new LoginRequest { Email = "a@b", Password = "pass" });

            res.Email.Should().Be("a@b");
            res.RefreshToken.Should().Be(rawRt);

            var jwt = new JwtSecurityTokenHandler().ReadJwtToken(res.Token);

            jwt.Claims.Any(c =>
                   (c.Type == "role" || c.Type == ClaimTypes.Role)   // поддерживаем оба варианта
                && c.Value == "Admin")
                .Should().BeTrue();
        }
        finally { disp?.Dispose(); db.Dispose(); }
    }

    [Fact]
    public async Task Refresh_should_rotate_and_return_new_access()
    {
        var (svc, users, tokens, _, factory, db, _, disp) = BuildService();
        try
        {
            var uid = Guid.NewGuid();
            var u = new User { Id = uid, Email = "u@e" };
            users.Setup(r => r.GetByIdAsync(uid)).ReturnsAsync(u);

            var existing = new RefreshToken
            {
                Id = Guid.NewGuid(),
                UserId = uid,
                TokenHash = "HX",
                CreatedAt = DateTime.UtcNow.AddMinutes(-5),
                ExpiresAt = DateTime.UtcNow.AddDays(1)
            };

            factory.Setup(f => f.Hash("raw-in")).Returns("HX");
            tokens.Setup(t => t.GetByHashAsync("HX")).ReturnsAsync(existing);

            // ПУНКТ 4: сервис обычно отзывает старый токен — добавляем setup
            tokens.Setup(t => t.RevokeAsync(existing, "1.2.3.4")).Returns(Task.CompletedTask);

            var rawOut = "raw-out";
            var newEnt = new RefreshToken
            {
                Id = Guid.NewGuid(),
                UserId = uid,
                TokenHash = "NEW",
                CreatedAt = DateTime.UtcNow,
                ExpiresAt = DateTime.UtcNow.AddDays(1)
            };
            factory.Setup(f => f.Create(uid, "1.2.3.4", "UA")).Returns((rawOut, newEnt));
            tokens.Setup(t => t.AddAsync(newEnt)).Returns(Task.CompletedTask);

            var res = await svc.RefreshAsync(new RefreshRequest { RefreshToken = "raw-in" }, "1.2.3.4", "UA");

            res.Email.Should().Be("u@e");
            res.RefreshToken.Should().Be(rawOut);
            existing.ReplacedByTokenId.Should().Be(newEnt.Id); // связка событий ротации
        }
        finally { disp?.Dispose(); db.Dispose(); }
    }

    [Fact]
    public async Task Refresh_should_revoke_all_on_inactive_token()
    {
        var (svc, _, tokens, _, factory, db, _, disp) = BuildService();
        try
        {
            var expired = new RefreshToken
            {
                Id = Guid.NewGuid(),
                UserId = Guid.NewGuid(),
                TokenHash = "HX",
                CreatedAt = DateTime.UtcNow.AddDays(-10),
                ExpiresAt = DateTime.UtcNow.AddDays(-1),
                RevokedAt = DateTime.UtcNow
            };

            factory.Setup(f => f.Hash("raw")).Returns("HX");
            tokens.Setup(t => t.GetByHashAsync("HX")).ReturnsAsync(expired);
            tokens.Setup(t => t.RevokeAllForUserAsync(expired.UserId, "ip")).Returns(Task.CompletedTask);

            await FluentActions.Invoking(() => svc.RefreshAsync(new RefreshRequest { RefreshToken = "raw" }, "ip", "ua"))
                .Should().ThrowAsync<UnauthorizedAppException>();
        }
        finally { disp?.Dispose(); db.Dispose(); }
    }

    [Fact]
    public async Task Logout_variants_should_call_repositories_as_expected()
    {
        var (svc, _, tokens, _, factory, db, _, disp) = BuildService();
        try
        {
            // Empty input
            await svc.LogoutAsync("");
            Mock.Get(tokens.Object).Verify(r => r.GetByHashAsync(It.IsAny<string>()), Times.Never);

            // Unknown token
            factory.Setup(f => f.Hash("x")).Returns("HX");
            tokens.Setup(r => r.GetByHashAsync("HX")).ReturnsAsync((RefreshToken?)null);
            await svc.LogoutAsync("x");
            Mock.Get(tokens.Object).Verify(r => r.RevokeAsync(It.IsAny<RefreshToken>(), It.IsAny<string?>()), Times.Never);

            // Active token
            var t = new RefreshToken { Id = Guid.NewGuid(), UserId = Guid.NewGuid(), ExpiresAt = DateTime.UtcNow.AddDays(1) };
            tokens.Reset();
            factory.Setup(f => f.Hash("y")).Returns("HY");
            tokens.Setup(r => r.GetByHashAsync("HY")).ReturnsAsync(t);
            tokens.Setup(r => r.RevokeAsync(t, "ip")).Returns(Task.CompletedTask);

            await svc.LogoutAsync("y", "ip");
            Mock.Get(tokens.Object).Verify(r => r.RevokeAsync(t, "ip"), Times.Once);
        }
        finally { disp?.Dispose(); db.Dispose(); }
    }

    [Fact]
    public async Task GetProfile_should_throw_when_not_found_and_return_dto_when_ok()
    {
        var (svc, users, _, _, _, db, _, disp) = BuildService();
        try
        {
            users.Setup(u => u.GetByIdAsync(It.IsAny<Guid>())).ReturnsAsync((User?)null);
            await FluentActions.Invoking(() => svc.GetProfileAsync(Guid.NewGuid())).Should().ThrowAsync<NotFoundException>();

            var u = new User { Id = Guid.NewGuid(), Email = "x@y", CreatedAt = new DateTime(2020, 1, 1) };
            users.Reset();
            users.Setup(x => x.GetByIdAsync(u.Id)).ReturnsAsync(u);
            var dto = await svc.GetProfileAsync(u.Id);
            dto.Email.Should().Be("x@y");
            dto.Id.Should().Be(u.Id);
            dto.CreatedAt.Should().Be(u.CreatedAt);
        }
        finally { disp?.Dispose(); db.Dispose(); }
    }

    [Fact]
    public async Task ChangePassword_should_verify_current_and_set_new_hash()
    {
        var (svc, users, _, hasher, _, db, _, disp) = BuildService();
        try
        {
            var u = new User { Id = Guid.NewGuid(), Email = "x@y", PasswordHash = "OLD" };
            users.Setup(r => r.GetByIdAsync(u.Id)).ReturnsAsync(u);

            hasher.Setup(h => h.VerifyHashedPassword(u, "OLD", "cur")).Returns(PasswordVerificationResult.Success);
            hasher.Setup(h => h.HashPassword(u, "new")).Returns("NEW");

            await svc.ChangePasswordAsync(u.Id, new ChangePasswordRequest { CurrentPassword = "cur", NewPassword = "new" }, CancellationToken.None);

            u.PasswordHash.Should().Be("NEW");
        }
        finally { disp?.Dispose(); db.Dispose(); }
    }

    [Fact]
    public async Task Sessions_and_logout_session_should_work()
    {
        var (svc, _, tokens, _, _, db, _, disp) = BuildService();
        try
        {
            var uid = Guid.NewGuid();
            var list = new List<RefreshToken>
            {
                new() { Id = Guid.NewGuid(), UserId = uid, CreatedAt = DateTime.UtcNow.AddHours(-1), ExpiresAt = DateTime.UtcNow.AddDays(1), CreatedByIp = "1", CreatedByUa = "UA" }
            }.AsReadOnly();

            tokens.Setup(r => r.GetActiveByUserAsync(uid, It.IsAny<CancellationToken>())).ReturnsAsync(list);
            var dtos = await svc.GetSessionsAsync(uid);
            dtos.Should().HaveCount(1);
            dtos.Single().IsActive.Should().BeTrue();

            var token = new RefreshToken { Id = Guid.NewGuid(), UserId = uid, ExpiresAt = DateTime.UtcNow.AddDays(1) };
            tokens.Setup(r => r.GetByIdAsync(token.Id, It.IsAny<CancellationToken>())).ReturnsAsync(token);
            tokens.Setup(r => r.RevokeAsync(token, "ip")).Returns(Task.CompletedTask);

            await svc.LogoutSessionAsync(uid, token.Id, "ip");
        }
        finally { disp?.Dispose(); db.Dispose(); }
    }
}

===== FILE: C:\Pet-Project\OnlineStore\tests\OnlineStore.Auth.Tests\MiscAuthTests.cs =====
using FluentAssertions;
using Microsoft.AspNetCore.Http;
using OnlineStore.Api.Security;
using OnlineStore.Infrastructure.Options;
using OnlineStore.Infrastructure.Security;
using Microsoft.Extensions.Options;

namespace OnlineStore.Auth.Tests;

public class MiscAuthTests
{
    [Fact]
    public void UserExtensions_GetUserId_should_parse_from_claims_or_throw()
    {
        var uid = Guid.NewGuid();

        // Из NameIdentifier
        var principal1 = new System.Security.Claims.ClaimsPrincipal(
            new System.Security.Claims.ClaimsIdentity(new[] {
                new System.Security.Claims.Claim(System.Security.Claims.ClaimTypes.NameIdentifier, uid.ToString())
            }));
        principal1.GetUserId().Should().Be(uid);

        // Из sub
        var principal2 = new System.Security.Claims.ClaimsPrincipal(
            new System.Security.Claims.ClaimsIdentity(new[] {
                new System.Security.Claims.Claim(System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Sub, uid.ToString())
            }));
        principal2.GetUserId().Should().Be(uid);

        // Пусто => исключение
        var bad = new System.Security.Claims.ClaimsPrincipal(new System.Security.Claims.ClaimsIdentity());
        FluentActions.Invoking(() => bad.GetUserId()).Should().Throw<UnauthorizedAccessException>();
    }

    [Fact]
    public void CookieFactory_should_generate_HttpOnly_cookie_options()
    {
        var ctx = new DefaultHttpContext();
        var opt = CookieFactory.Refresh(ctx.Request);

        opt.HttpOnly.Should().BeTrue();
        opt.SameSite.Should().NotBe(SameSiteMode.None); // в Dev может быть Lax/Strict
    }

    [Fact]
    public void RefreshTokenFactory_Hash_should_be_stable_and_256bits()
    {
        var factory = new RefreshTokenFactory(Options.Create(new JwtOptions
        {
            Issuer = "i",
            Audience = "a",
            Key = new string('K', 64),
            RefreshTokenLifetimeDays = 7
        }));

        var h1 = factory.Hash("abc");
        var h2 = factory.Hash("abc");

        h1.Should().Be(h2); // детерминированно
        Convert.FromBase64String(h1).Length.Should().Be(32); // SHA-256 (32 байта)
    }
}

===== FILE: C:\Pet-Project\OnlineStore\tests\OnlineStore.Auth.Tests\TestHelpers.cs =====
using Microsoft.Data.Sqlite;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Hosting;
using Moq;
using OnlineStore.Infrastructure.Persistence;

namespace OnlineStore.Auth.Tests;

/// <summary>
/// Вспомогалки для юнит-тестов Auth.
/// </summary>
public static class TestHelpers
{
    // Создаём DbContext на SQLite In-Memory, чтобы работали транзакции.
    public static (AppDbContext Db, SqliteConnection Conn) CreateSqliteDb(bool ensureCreated = false)
    {
        var conn = new SqliteConnection("DataSource=:memory:");
        conn.Open();

        var options = new DbContextOptionsBuilder<AppDbContext>()
            .UseSqlite(conn)
            .EnableSensitiveDataLogging()
            .Options;

        var db = new AppDbContext(options);

        // Нам это не нужно для unit-тестов; оставим опционально
        if (ensureCreated)
            db.Database.EnsureCreated();

        return (db, conn);
    }


    // Поддельное окружение (для различий Dev/Prod в настройках cookie).
    public static IHostEnvironment FakeEnv(bool isProduction = false)
    {
        var env = new Mock<IHostEnvironment>();
        env.SetupGet(e => e.EnvironmentName).Returns(isProduction ? "Production" : "Development");
        return env.Object;
    }


    // HttpContext для контроллеров (чтобы писать/читать cookie/заголовки).
    public static DefaultHttpContext HttpWithCookies() => new DefaultHttpContext();
}

===== FILE: C:\Pet-Project\OnlineStore\tests\OnlineStore.Auth.Tests\ValidatorsTests.cs =====
using FluentAssertions;
using FluentValidation.TestHelper;
using OnlineStore.Application.DTOs.Auth;
using OnlineStore.Application.Validation.Auth;
using Xunit;

namespace OnlineStore.Auth.Tests;

public class ValidatorsTests
{
    [Fact]
    public void RegisterValidator_should_validate_email_and_strong_password()
    {
        var v = new RegisterRequestValidator();

        // Пустой email должен давать ошибку по Email
        v.TestValidate(new RegisterRequest { Email = "", Password = "x" })
         .ShouldHaveValidationErrorFor(x => x.Email);

        // Валидный email и сильный пароль — валидно
        v.TestValidate(new RegisterRequest { Email = "user@example.com", Password = "Strong9!" })
         .IsValid.Should().BeTrue();
    }

    [Fact]
    public void LoginValidator_should_require_email_and_password()
    {
        var v = new LoginRequestValidator();

        // И email, и пароль пустые — обе ошибки должны присутствовать
        var bad = v.TestValidate(new LoginRequest { Email = "", Password = "" });
        bad.ShouldHaveValidationErrorFor(x => x.Email);
        bad.ShouldHaveValidationErrorFor(x => x.Password);

        // Валидный кейс
        v.TestValidate(new LoginRequest { Email = "user@example.com", Password = "x" })
         .IsValid.Should().BeTrue();
    }

    [Fact]
    public void ChangePasswordValidator_should_require_different_passwords()
    {
        var v = new ChangePasswordRequestValidator();

        // Текущий и новый одинаковые — форма невалидна
        var same = v.TestValidate(new ChangePasswordRequest { CurrentPassword = "Aaa1!", NewPassword = "Aaa1!" });
        same.IsValid.Should().BeFalse();

        // Валидный кейс (разные пароли, новый — «сильный»)
        v.TestValidate(new ChangePasswordRequest { CurrentPassword = "Aaa1!Aaa", NewPassword = "NewPass9!" })
         .IsValid.Should().BeTrue();
    }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Api\OnlineStore.Api.csproj =====
<Project Sdk="Microsoft.NET.Sdk.Web">
  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <UserSecretsId>1c729a23-666d-45ce-ba83-489e1a1bd5e9</UserSecretsId>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\OnlineStore.Application\OnlineStore.Application.csproj" />
    <ProjectReference Include="..\OnlineStore.Infrastructure\OnlineStore.Infrastructure.csproj" />
    <ProjectReference Include="..\OnlineStore.Domain\OnlineStore.Domain.csproj" />
  </ItemGroup>

  
  <PropertyGroup>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <NoWarn>$(NoWarn);1591</NoWarn>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="FluentValidation.AspNetCore" Version="11.3.1" />
    <PackageReference Include="FluentValidation.DependencyInjectionExtensions" Version="12.0.0" />
    <PackageReference Include="Npgsql.EntityFrameworkCore.PostgreSQL" Version="9.0.4" />
    <PackageReference Include="Swashbuckle.AspNetCore" Version="9.0.3" />
    <PackageReference Include="Microsoft.AspNetCore.OpenApi" Version="9.0.7" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="9.0.7">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
  </ItemGroup>
</Project>

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Application\OnlineStore.Application.csproj =====
<Project Sdk="Microsoft.NET.Sdk">

  <ItemGroup>
    <ProjectReference Include="..\OnlineStore.Domain\OnlineStore.Domain.csproj" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="AutoMapper.Extensions.Microsoft.DependencyInjection" Version="12.0.1" />
    <PackageReference Include="FluentValidation" Version="12.0.0" />
  </ItemGroup>

  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

</Project>

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Client\OnlineStore.Client.csproj =====
<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.OpenApi" Version="9.0.8" />
    <PackageReference Include="Microsoft.Extensions.Http" Version="9.0.8" />
    <PackageReference Include="System.Net.Http.Json" Version="9.0.8" />
  </ItemGroup>

</Project>

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Domain\OnlineStore.Domain.csproj =====
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

</Project>

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Infrastructure\OnlineStore.Infrastructure.csproj =====
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\OnlineStore.Domain\OnlineStore.Domain.csproj" />
    <ProjectReference Include="..\OnlineStore.Application\OnlineStore.Application.csproj" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="EFCore.NamingConventions" Version="9.0.0" />
    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="9.0.8" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="9.0.8">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.EntityFrameworkCore.Relational" Version="9.0.8" />
    <PackageReference Include="Npgsql.EntityFrameworkCore.PostgreSQL" Version="9.0.4" />
    <PackageReference Include="Microsoft.AspNetCore.Authentication.JwtBearer" Version="9.0.7" />
    <PackageReference Include="Microsoft.AspNetCore.Identity" Version="2.3.1" />
    <PackageReference Include="System.IdentityModel.Tokens.Jwt" Version="8.13.0" />
  </ItemGroup>
</Project>

===== FILE: C:\Pet-Project\OnlineStore\tests\OnlineStore.Auth.Tests\OnlineStore.Auth.Tests.csproj =====
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <IsPackable>false</IsPackable>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="coverlet.collector" Version="6.0.4">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="FluentAssertions" Version="8.6.0" />
    <PackageReference Include="Microsoft.AspNetCore.Http" Version="2.3.0" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Sqlite" Version="9.0.8" />
    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.14.1" />
    <PackageReference Include="Moq" Version="4.20.72" />
    <PackageReference Include="System.IdentityModel.Tokens.Jwt" Version="8.14.0" />
    <PackageReference Include="xunit" Version="2.9.3" />
    <PackageReference Include="xunit.runner.visualstudio" Version="3.1.4">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
  </ItemGroup>

  <ItemGroup>
    <Using Include="Xunit" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\OnlineStore.Api\OnlineStore.Api.csproj" />
    <ProjectReference Include="..\..\OnlineStore.Application\OnlineStore.Application.csproj" />
    <ProjectReference Include="..\..\OnlineStore.Domain\OnlineStore.Domain.csproj" />
    <ProjectReference Include="..\..\OnlineStore.Infrastructure\OnlineStore.Infrastructure.csproj" />
  </ItemGroup>

</Project>

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Api\appsettings.Development.json =====
{
  "ConnectionStrings": {
    "DefaultConnection": "Host=localhost;Port=5432;Database=OnlineStoreDb;Username=postgres;Password=129012"
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "Jwt": {
    "Key": "",
    "Issuer": "OnlineStore",
    "Audience": "OnlineStore",
    "AccessTokenLifetimeMinutes": 30,
    "RefreshTokenLifetimeDays": 30
  },
  "AdminSeed": {
    "Email": "admin@onlinestore.local",
    "Password": "Admin#12345"
  },
  "Cors": {
    "Origins": "http://localhost:5173;https://localhost:5173;https://localhost:7014"
  },
    "Proxy": {
      "KnownProxies": "127.0.0.1;10.0.0.2",
      "KnownNetworks": "10.0.0.0/8;192.168.0.0/16"
    },
  "AllowedHosts": "*"
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Api\appsettings.json =====
{
  "ConnectionStrings": {
    "DefaultConnection": "Host=localhost;Port=5432;Database=OnlineStoreDb;Username=postgres;Password=129012"
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "Jwt": {
    "Key": "",
    "Issuer": "OnlineStore",
    "Audience": "OnlineStore",
    "AccessTokenLifetimeMinutes": 30,
    "RefreshTokenLifetimeDays": 30
  },
  "AllowedHosts": "*"
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Client\appsettings.Development.json =====
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  }
}

===== FILE: C:\Pet-Project\OnlineStore\OnlineStore.Client\appsettings.json =====
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*"
}

