// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OnlineStore.Infrastructure.Persistence;

#nullable disable

namespace OnlineStore.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250818221532_AddIsAdminToUser-v3")]
    partial class AddIsAdminToUserv3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OnlineStore.Domain.Entities.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_carts");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_carts_user_id");

                    b.ToTable("carts", null, t =>
                        {
                            t.HasComment("Корзины пользователей.");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("AddedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("added_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uuid")
                        .HasColumnName("cart_id");

                    b.Property<Guid?>("Model3DId")
                        .HasColumnType("uuid")
                        .HasColumnName("model3d_id");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.HasKey("Id")
                        .HasName("pk_cart_items");

                    b.HasIndex("Model3DId")
                        .HasDatabaseName("ix_cart_items_model3d_id");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_cart_items_project_id");

                    b.HasIndex("CartId", "AddedAt")
                        .HasDatabaseName("ix_cart_items_cart_id_added_at");

                    b.HasIndex("CartId", "Model3DId")
                        .IsUnique()
                        .HasDatabaseName("ix_cart_items_cart_id_model3d_id")
                        .HasFilter("model3d_id IS NOT NULL");

                    b.HasIndex("CartId", "ProjectId")
                        .IsUnique()
                        .HasDatabaseName("ix_cart_items_cart_id_project_id")
                        .HasFilter("project_id IS NOT NULL");

                    b.ToTable("cart_items", null, t =>
                        {
                            t.HasComment("Позиции в корзинах (модель или проект).");

                            t.HasCheckConstraint("CK_CartItem_ExactlyOneRef", "(CASE WHEN model3d_id IS NOT NULL THEN project_id IS NULL WHEN project_id IS NOT NULL THEN model3d_id IS NULL ELSE FALSE END)");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Model3D", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CompanyUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("company_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("price");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.HasKey("Id")
                        .HasName("pk_models");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_models_created_at");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_models_project_id");

                    b.ToTable("models", null, t =>
                        {
                            t.HasComment("3D-модели и их метаданные.");

                            t.HasCheckConstraint("CK_Models_Price_NonNegative", "price >= 0");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.ModelImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsPreview")
                        .HasColumnType("boolean")
                        .HasColumnName("is_preview");

                    b.Property<Guid>("Model3DId")
                        .HasColumnType("uuid")
                        .HasColumnName("model3d_id");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.HasKey("Id")
                        .HasName("pk_model_images");

                    b.HasIndex("Model3DId")
                        .IsUnique()
                        .HasDatabaseName("ix_model_images_model3d_id")
                        .HasFilter("is_preview = TRUE");

                    b.HasIndex("Model3DId", "Order")
                        .HasDatabaseName("ix_model_images_model3d_id_order");

                    b.ToTable("model_images", null, t =>
                        {
                            t.HasComment("Изображения, привязанные к 3D-моделям.");

                            t.HasCheckConstraint("CK_ModelImages_Order_NonNegative", "\"order\" >= 0");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("total_amount");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_orders_created_at");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_orders_user_id");

                    b.HasIndex("UserId", "CreatedAt")
                        .HasDatabaseName("ix_orders_user_id_created_at");

                    b.ToTable("orders", null, t =>
                        {
                            t.HasComment("Заказы пользователей.");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("Model3DId")
                        .HasColumnType("uuid")
                        .HasColumnName("model3d_id");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<decimal>("PriceAtPurchase")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("price_at_purchase");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.HasKey("Id")
                        .HasName("pk_order_items");

                    b.HasIndex("Model3DId")
                        .HasDatabaseName("ix_order_items_model3d_id")
                        .HasFilter("model3d_id IS NOT NULL");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_order_items_order_id");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_order_items_project_id")
                        .HasFilter("project_id IS NOT NULL");

                    b.HasIndex("OrderId", "Model3DId")
                        .IsUnique()
                        .HasDatabaseName("ix_order_items_order_id_model3d_id")
                        .HasFilter("model3d_id IS NOT NULL");

                    b.HasIndex("OrderId", "ProjectId")
                        .IsUnique()
                        .HasDatabaseName("ix_order_items_order_id_project_id")
                        .HasFilter("project_id IS NOT NULL");

                    b.ToTable("order_items", null, t =>
                        {
                            t.HasComment("Позиции заказа: либо модель, либо проект.");

                            t.HasCheckConstraint("CK_OrderItem_ExactlyOneRef", "(CASE WHEN model3d_id IS NOT NULL THEN project_id IS NULL WHEN project_id IS NOT NULL THEN model3d_id IS NULL ELSE FALSE END)");

                            t.HasCheckConstraint("CK_OrderItem_PriceAtPurchase_NonNegative", "price_at_purchase >= 0");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CompanyUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("company_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("pk_projects");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_projects_created_at");

                    b.ToTable("projects", null, t =>
                        {
                            t.HasComment("Проекты (наборы моделей) и их метаданные.");

                            t.HasCheckConstraint("CK_Projects_Price_NonNegative", "price >= 0");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.ProjectImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsPreview")
                        .HasColumnType("boolean")
                        .HasColumnName("is_preview");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.HasKey("Id")
                        .HasName("pk_project_images");

                    b.HasIndex("ProjectId")
                        .IsUnique()
                        .HasDatabaseName("ix_project_images_project_id")
                        .HasFilter("is_preview = TRUE");

                    b.HasIndex("ProjectId", "Order")
                        .HasDatabaseName("ix_project_images_project_id_order");

                    b.ToTable("project_images", null, t =>
                        {
                            t.HasComment("Изображения, привязанные к проектам.");

                            t.HasCheckConstraint("CK_ProjectImages_Order_NonNegative", "\"order\" >= 0");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("created_by_ip");

                    b.Property<string>("CreatedByUa")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("created_by_ua");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<Guid?>("ReplacedByTokenId")
                        .HasColumnType("uuid")
                        .HasColumnName("replaced_by_token_id");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("revoked_at");

                    b.Property<string>("RevokedByIp")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("revoked_by_ip");

                    b.Property<string>("TokenHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("token_hash");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_refresh_tokens");

                    b.HasIndex("TokenHash")
                        .IsUnique()
                        .HasDatabaseName("ix_refresh_tokens_token_hash");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_refresh_tokens_user_id");

                    b.ToTable("refresh_tokens", null, t =>
                        {
                            t.HasComment("Refresh-токены пользователей (храним хеш).");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at_utc");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<bool>("IsAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_admin");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("password_hash");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("NormalizedEmail")
                        .IsUnique()
                        .HasDatabaseName("ix_users_normalized_email");

                    b.HasIndex("IsDeleted", "IsAdmin")
                        .HasDatabaseName("ix_users_is_deleted_is_admin");

                    b.ToTable("users", null, t =>
                        {
                            t.HasComment("Пользователи интернет-магазина.");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Cart", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("OnlineStore.Domain.Entities.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_carts_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cart_items_carts_cart_id");

                    b.HasOne("OnlineStore.Domain.Entities.Model3D", "Model3D")
                        .WithMany("CartItems")
                        .HasForeignKey("Model3DId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_cart_items_models_model3d_id");

                    b.HasOne("OnlineStore.Domain.Entities.Project", "Project")
                        .WithMany("CartItems")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_cart_items_projects_project_id");

                    b.Navigation("Cart");

                    b.Navigation("Model3D");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Model3D", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.Project", "Project")
                        .WithMany("Models")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_models_projects_project_id");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.ModelImage", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.Model3D", "Model3D")
                        .WithMany("Images")
                        .HasForeignKey("Model3DId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_model_images_models_model3d_id");

                    b.Navigation("Model3D");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Order", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_orders_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.Model3D", "Model3D")
                        .WithMany("OrderItems")
                        .HasForeignKey("Model3DId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_order_items_models_model3d_id");

                    b.HasOne("OnlineStore.Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_items_orders_order_id");

                    b.HasOne("OnlineStore.Domain.Entities.Project", "Project")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_order_items_projects_project_id");

                    b.Navigation("Model3D");

                    b.Navigation("Order");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.ProjectImage", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.Project", "Project")
                        .WithMany("Images")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_images_projects_project_id");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_refresh_tokens_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Model3D", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Images");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Project", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Images");

                    b.Navigation("Models");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.User", b =>
                {
                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
