// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OnlineStore.Infrastructure.Persistence;

#nullable disable

namespace OnlineStore.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250813142834_CheckConstraints_Price_Order")]
    partial class CheckConstraints_Price_Order
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OnlineStore.Domain.Entities.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Model3DId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Model3DId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("CartId", "Model3DId")
                        .IsUnique()
                        .HasFilter("\"Model3DId\" IS NOT NULL");

                    b.HasIndex("CartId", "ProjectId")
                        .IsUnique()
                        .HasFilter("\"ProjectId\" IS NOT NULL");

                    b.ToTable("CartItems", null, t =>
                        {
                            t.HasCheckConstraint("CK_CartItem_ExactlyOneRef", "(CASE WHEN \"Model3DId\" IS NOT NULL THEN 1 ELSE 0 END) + (CASE WHEN \"ProjectId\" IS NOT NULL THEN 1 ELSE 0 END) = 1");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Model3D", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CompanyUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Models", null, t =>
                        {
                            t.HasComment("Таблица моделей 3D, содержащая информацию о акутальных моделях, их проектах и изображениях.");

                            t.HasCheckConstraint("CK_Models_Price_NonNegative", "\"Price\" >= 0");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.ModelImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsPreview")
                        .HasColumnType("boolean");

                    b.Property<Guid>("Model3DId")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Model3DId")
                        .IsUnique()
                        .HasFilter("\"IsPreview\" = TRUE");

                    b.HasIndex("Model3DId", "Order");

                    b.ToTable("ModelImages", null, t =>
                        {
                            t.HasCheckConstraint("CK_ModelImages_Order_NonNegative", "\"Order\" >= 0");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Model3DId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("PriceAtPurchase")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Model3DId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("OrderId", "Model3DId")
                        .IsUnique()
                        .HasFilter("\"Model3DId\" IS NOT NULL");

                    b.HasIndex("OrderId", "ProjectId")
                        .IsUnique()
                        .HasFilter("\"ProjectId\" IS NOT NULL");

                    b.ToTable("OrderItems", null, t =>
                        {
                            t.HasCheckConstraint("CK_OrderItem_ExactlyOneRef", "(CASE WHEN \"Model3DId\" IS NOT NULL THEN 1 ELSE 0 END) + (CASE WHEN \"ProjectId\" IS NOT NULL THEN 1 ELSE 0 END) = 1");

                            t.HasCheckConstraint("CK_OrderItems_PriceAtPurchase_NonNegative", "\"PriceAtPurchase\" >= 0");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CompanyUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Projects", null, t =>
                        {
                            t.HasComment("Таблица проектов, содержащая информацию об актуальных проектах, их моделях и изображениях.");

                            t.HasCheckConstraint("CK_Projects_Price_NonNegative", "\"Price\" >= 0");
                        });
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.ProjectImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsPreview")
                        .HasColumnType("boolean");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique()
                        .HasFilter("\"IsPreview\" = TRUE");

                    b.HasIndex("ProjectId", "Order");

                    b.ToTable("ProjectImages", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Cart", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("OnlineStore.Domain.Entities.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineStore.Domain.Entities.Model3D", "Model3D")
                        .WithMany("CartItems")
                        .HasForeignKey("Model3DId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OnlineStore.Domain.Entities.Project", "Project")
                        .WithMany("CartItems")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Cart");

                    b.Navigation("Model3D");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Model3D", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.Project", "Project")
                        .WithMany("Models")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Project");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.ModelImage", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.Model3D", "Model3D")
                        .WithMany("Images")
                        .HasForeignKey("Model3DId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model3D");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Order", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.Model3D", "Model3D")
                        .WithMany("OrderItems")
                        .HasForeignKey("Model3DId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OnlineStore.Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineStore.Domain.Entities.Project", "Project")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Model3D");

                    b.Navigation("Order");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.ProjectImage", b =>
                {
                    b.HasOne("OnlineStore.Domain.Entities.Project", "Project")
                        .WithMany("Images")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Model3D", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Images");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.Project", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Images");

                    b.Navigation("Models");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("OnlineStore.Domain.Entities.User", b =>
                {
                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
